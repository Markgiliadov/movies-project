{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst GeneralMovies = props => {\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  useEffect(() => {\n    console.log(searchInput);\n    let searchInput = \"hero\"; // let movieUrl = \"\";\n\n    let myMovies = [];\n    let id_info = [];\n    let movieUrl = \"\"; // let myMovies = [];\n    // let finalMovies = [];\n\n    let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n    console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n    if (searchInput !== \"\") urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n    console.log(urlString);\n    fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      // console.log(json);\n      for (const result of json) {\n        // console.log(\"index\" + i + \"value\" + result.id);\n        // id_info[i] = result.id;\n        console.log(result);\n        const myId = result.result;\n        setStateIds(prevIds => [...prevIds, ...myId]);\n      } // id_info = json.results.map((result) => {\n      //   return result.id; // returning id's of movies\n      // });\n\n    });\n    console.log(id_info); // .catch((error) => console.log(error));\n\n    console.log(id_info);\n    console.log(stateIds); // console.log(inputReady);\n\n    console.log(stateIds);\n    console.log(props.baseMovieUrl + \"fake id\" + props.API_KEY_MOVIE);\n\n    for (const [i, id] of stateIds.entries()) {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n      console.log(\"i? \" + i + \" val? \" + id);\n      myMovies[i] = fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        console.log(\"index \" + i + \"val \" + json);\n        return json;\n      });\n      console.log(myMovies);\n      setStateMovies(myMovies);\n      console.log(stateMovies);\n    }\n\n    console.log(stateMovies);\n    setInputEntered(true);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default GeneralMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js"],"names":["React","useEffect","useState","GeneralMovies","props","stateIds","setStateIds","stateMovies","setStateMovies","inputEntered","setInputEntered","console","log","searchInput","myMovies","id_info","movieUrl","urlString","baseSearchUrl","API_KEY_SEARCH","concat","fetch","then","res","json","result","myId","prevIds","baseMovieUrl","API_KEY_MOVIE","i","id","entries"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst GeneralMovies = (props) => {\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  useEffect(() => {\n    console.log(searchInput);\n    let searchInput = \"hero\";\n    // let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let movieUrl = \"\";\n    // let myMovies = [];\n    // let finalMovies = [];\n    let urlString = \"\";\n    // let searchInput = props.searchBar.props.onChange();\n    console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n    if (searchInput !== \"\")\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    console.log(urlString);\n    fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        // console.log(json);\n        for (const result of json) {\n          // console.log(\"index\" + i + \"value\" + result.id);\n          // id_info[i] = result.id;\n          console.log(result);\n          const myId = result.result;\n          setStateIds((prevIds) => [...prevIds, ...myId]);\n        }\n        // id_info = json.results.map((result) => {\n        //   return result.id; // returning id's of movies\n        // });\n      });\n    console.log(id_info);\n    // .catch((error) => console.log(error));\n    console.log(id_info);\n    console.log(stateIds);\n\n    // console.log(inputReady);\n\n    console.log(stateIds);\n    console.log(props.baseMovieUrl + \"fake id\" + props.API_KEY_MOVIE);\n    for (const [i, id] of stateIds.entries()) {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n      console.log(\"i? \" + i + \" val? \" + id);\n      myMovies[i] = fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n          console.log(\"index \" + i + \"val \" + json);\n          return json;\n        });\n      console.log(myMovies);\n      setStateMovies(myMovies);\n      console.log(stateMovies);\n    }\n    console.log(stateMovies);\n    setInputEntered(true);\n  }, []);\n  return <div></div>;\n};\n\nexport default GeneralMovies;\n"]},"metadata":{},"sourceType":"module"}