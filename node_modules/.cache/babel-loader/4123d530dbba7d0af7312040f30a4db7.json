{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState, Component } from \"react\"; // import Auxil from \"../../../hoc/Auxil/Auxil\";\n\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = props => {\n  const [stateIds, setStateIds] = useState([]);\n  useEffect((searchInput, props) => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = []; // let finalMovies = [];\n\n    let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n    console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n    if (searchInput !== \"\") urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH); //   else if(){\n    // }\n    // else if(){}\n\n    console.log(urlString);\n    fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      // console.log(json);\n      for (const result of json) {\n        // console.log(\"index\" + i + \"value\" + result.id);\n        // id_info[i] = result.id;\n        console.log(result);\n        const myId = result.result;\n        setStateIds(prevIds => [...prevIds, ...myId]);\n      } // id_info = json.results.map((result) => {\n      //   return result.id; // returning id's of movies\n      // });\n\n    });\n    console.log(id_info); // .catch((error) => console.log(error));\n    // if (stateIds.length > 1) setInputReady(true);\n\n    console.log(id_info);\n    console.log(stateIds);\n  }, []);\n  const [stateMovies, setStateMovies] = useState([]);\n  useEffect(() => {\n    // console.log(inputReady);\n    let movieUrl = \"\";\n    let myMovies = [];\n    console.log(stateIds);\n    console.log(props.baseMovieUrl + \"fake id\" + props.API_KEY_MOVIE);\n\n    for (const [i, id] of stateIds.entries()) {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n      console.log(\"i? \" + i + \" val? \" + id);\n      myMovies[i] = fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        console.log(\"index \" + i + \"val \" + json);\n        return json;\n      });\n      console.log(myMovies);\n      setStateMovies(myMovies);\n      console.log(stateMovies);\n    }\n\n    console.log(stateMovies);\n    setInputEntered(true);\n  }, [stateIds]);\n  const [inputEntered, setInputEntered] = useState(true); // const [inputReady, setInputReady] = useState(false);\n  // useEffect(() => starterFunc);\n  // let [stateMovies, setStateMovies] = use(State([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n\n  const searchContent = event => {\n    let searchInput = event.target.value; // const [stateSearchInput, setStateSearchInput] = useState(searchInput);\n\n    fetchedMovies(\"captain\");\n  };\n\n  const fetchedMovies = searchInput => {//  {FetchMovies main function copied to useeffect}\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    // stateIds.map(async (id, index) => {\n    //   movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n    //   // console.log(movieUrl);\n    //   myMovies[index] = await fetch(movieUrl)\n    //     .then((res) => res.json())\n    //     .then((json) => {\n    //       // console.log(json);\n    //       setStateMovies(myMovies);\n    //       return json; // returning movie at an index location\n    //     });\n    // Promise.all(myMovies);\n    // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n    // setStateMovies((myMovies) => {\n    //   return { myMovies };\n    // });\n    // setStateMovies((prevStateMovies) => {\n    //   return { ...prevStateMovies, ...myMovies };\n    // });\n    // console.log(stateMovies);\n    // setState((prevState) => {\n    //   // Object.assign would also work\n    //   return { ...prevState, ...updatedValues };\n    // });\n    // console.log(myMovies[index]);\n    // finalMovies = myMovies;\n    // console.log(finalMovies);\n    // .catch((error) => {\n    //   console.log(error);\n    // })\n    // this.setState({\n    //   movies: myMovies,\n    // });\n    // console.log(this.state.movies);\n    // });\n    // return finalMovies;\n    // console.log(stmovies);\n    // });\n    // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // const starterFunc = () => {\n  // if(this.state.)\n\n  if (props.baseSearchUrl) searchBar = /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: searchContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 40\n    }\n  });\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    console.log(stateMovies);\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, stateMovies.map((movie, index) => {\n      if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n      return (\n        /*#__PURE__*/\n        // <div style={{ display: \"flex\" }}>\n        React.createElement(Movie, {\n          key: movie.id,\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }\n        }) // {console.log(movie.title)}\n        // </div>\n\n      );\n    }));\n    console.log(movies);\n  } else {\n    inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 23\n      }\n    }, \"Please! enter a search input above! :)\");\n  } // };\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, props.children, /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: searchContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }), movies, inputEnablerMsg);\n};\n\nexport default GenericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Component","Movie","SearchBar","GenericMovies","props","stateIds","setStateIds","searchInput","console","log","movieUrl","myMovies","id_info","urlString","baseSearchUrl","API_KEY_SEARCH","concat","fetch","then","res","json","result","myId","prevIds","stateMovies","setStateMovies","baseMovieUrl","API_KEY_MOVIE","i","id","entries","setInputEntered","inputEntered","searchContent","event","target","value","fetchedMovies","imgUrl","movies","myPath","inputEnablerMsg","searchBar","map","movie","index","poster_path","backdrop_path","title","overview","vote_average","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\n// import Auxil from \"../../../hoc/Auxil/Auxil\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = (props) => {\n  const [stateIds, setStateIds] = useState([]);\n\n  useEffect((searchInput, props) => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    // let finalMovies = [];\n    let urlString = \"\";\n    // let searchInput = props.searchBar.props.onChange();\n    console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n    if (searchInput !== \"\")\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    //   else if(){\n    // }\n    // else if(){}\n    console.log(urlString);\n    fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        // console.log(json);\n        for (const result of json) {\n          // console.log(\"index\" + i + \"value\" + result.id);\n          // id_info[i] = result.id;\n          console.log(result);\n          const myId = result.result;\n          setStateIds((prevIds) => [...prevIds, ...myId]);\n        }\n        // id_info = json.results.map((result) => {\n        //   return result.id; // returning id's of movies\n        // });\n      });\n    console.log(id_info);\n    // .catch((error) => console.log(error));\n\n    // if (stateIds.length > 1) setInputReady(true);\n    console.log(id_info);\n    console.log(stateIds);\n  }, []);\n  const [stateMovies, setStateMovies] = useState([]);\n  useEffect(() => {\n    // console.log(inputReady);\n    let movieUrl = \"\";\n    let myMovies = [];\n    console.log(stateIds);\n    console.log(props.baseMovieUrl + \"fake id\" + props.API_KEY_MOVIE);\n    for (const [i, id] of stateIds.entries()) {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n      console.log(\"i? \" + i + \" val? \" + id);\n      myMovies[i] = fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n          console.log(\"index \" + i + \"val \" + json);\n          return json;\n        });\n      console.log(myMovies);\n      setStateMovies(myMovies);\n      console.log(stateMovies);\n    }\n    console.log(stateMovies);\n    setInputEntered(true);\n  }, [stateIds]);\n  const [inputEntered, setInputEntered] = useState(true);\n  // const [inputReady, setInputReady] = useState(false);\n  // useEffect(() => starterFunc);\n  // let [stateMovies, setStateMovies] = use(State([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n\n  const searchContent = (event) => {\n    let searchInput = event.target.value;\n    // const [stateSearchInput, setStateSearchInput] = useState(searchInput);\n    fetchedMovies(\"captain\");\n  };\n  const fetchedMovies = (searchInput) => {\n    //  {FetchMovies main function copied to useeffect}\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    // stateIds.map(async (id, index) => {\n    //   movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n    //   // console.log(movieUrl);\n    //   myMovies[index] = await fetch(movieUrl)\n    //     .then((res) => res.json())\n    //     .then((json) => {\n    //       // console.log(json);\n    //       setStateMovies(myMovies);\n    //       return json; // returning movie at an index location\n    //     });\n    // Promise.all(myMovies);\n    // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n    // setStateMovies((myMovies) => {\n    //   return { myMovies };\n    // });\n    // setStateMovies((prevStateMovies) => {\n    //   return { ...prevStateMovies, ...myMovies };\n    // });\n    // console.log(stateMovies);\n    // setState((prevState) => {\n    //   // Object.assign would also work\n    //   return { ...prevState, ...updatedValues };\n    // });\n    // console.log(myMovies[index]);\n    // finalMovies = myMovies;\n    // console.log(finalMovies);\n    // .catch((error) => {\n    //   console.log(error);\n    // })\n    // this.setState({\n    //   movies: myMovies,\n    // });\n    // console.log(this.state.movies);\n    // });\n    // return finalMovies;\n    // console.log(stmovies);\n    // });\n    // this.setState({ inputEntered: true });\n  };\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // const starterFunc = () => {\n  // if(this.state.)\n  if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    console.log(stateMovies);\n    movies = (\n      <div>\n        {stateMovies.map((movie, index) => {\n          if (movie.poster_path) myPath = movie.poster_path;\n          else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            // <div style={{ display: \"flex\" }}>\n            <Movie\n              key={movie.id}\n              title={movie.title}\n              image={imgUrl + myPath}\n              description={movie.overview}\n              name={movie.title}\n              rating={movie.vote_average}\n            />\n            // {console.log(movie.title)}\n            // </div>\n          );\n        })}\n      </div>\n    );\n    console.log(movies);\n  } else {\n    inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  }\n  // };\n\n  return (\n    <div>\n      {/* {props.searchBar} */}\n      {props.children}\n      <SearchBar onChange={searchContent} />\n      {/* {searchBar} */}\n      {movies}\n\n      {inputEnablerMsg}\n    </div>\n  );\n};\nexport default GenericMovies;\n"]},"metadata":{},"sourceType":"module"}