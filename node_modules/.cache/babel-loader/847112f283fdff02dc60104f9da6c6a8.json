{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState, Component } from \"react\"; // import Auxil from \"../../../hoc/Auxil/Auxil\";\n\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = props => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [stateIds, setStateIds] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n  useEffect(() => fetchedMovies, []); // let [stateMovies, setStateMovies] = use(State([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n  // useEffect(() => {}, [stateMovies]);\n\n  const searchContent = event => {\n    let searchInput = event.target.value; // const [stateSearchInput, setStateSearchInput] = useState(searchInput);\n\n    fetchedMovies(\"captain\");\n  };\n\n  const fetchedMovies = async searchInput => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = []; // let finalMovies = [];\n\n    let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n    if (searchInput !== \"\") urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH); //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      console.log(json);\n      id_info = json.results.map(result => {\n        return result.id; // returning id's of movies\n      });\n    }); // .catch((error) => console.log(error));\n\n    setStateIds(id_info); // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n\n    stateIds.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n\n      myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        return json; // returning movie at an index location\n      }); // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n      // setStateMovies((myMovies) => {\n      //   return { myMovies };\n      // });\n\n      setStateMovies(myMovies);\n      setInputEntered(true); // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      // console.log(stateMovies);\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    }); // return finalMovies;\n    // console.log(stmovies);\n    // });\n    // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n\n  const starterFunc = () => {\n    // if(this.state.)\n    if (props.baseSearchUrl) searchBar = /*#__PURE__*/React.createElement(SearchBar, {\n      onChange: searchContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 42\n      }\n    });\n\n    if (inputEntered) {\n      // console.log(stateMovies);\n      // const presentMovies = stateMovies;\n      movies = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, stateMovies.map((movie, index) => {\n        if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }\n        }, \" NO IMAGE! sorry :(\");\n        return (\n          /*#__PURE__*/\n          // <div style={{ display: \"flex\" }}>\n          React.createElement(Movie, {\n            key: movie.id,\n            title: movie.title,\n            image: imgUrl + myPath,\n            description: movie.overview,\n            name: movie.title,\n            rating: movie.vote_average,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }\n          }) // {console.log(movie.title)}\n          // </div>\n\n        );\n      }));\n      console.log(movies);\n    } else {\n      inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }, \"Please! enter a search input above! :)\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, starterFunc, props.children, searchBar, movies, inputEnablerMsg);\n};\n\nexport default GenericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Component","Movie","SearchBar","GenericMovies","props","stateMovies","setStateMovies","stateIds","setStateIds","inputEntered","setInputEntered","fetchedMovies","searchContent","event","searchInput","target","value","console","log","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","results","map","result","id","index","baseMovieUrl","API_KEY_MOVIE","imgUrl","movies","myPath","inputEnablerMsg","searchBar","starterFunc","movie","poster_path","backdrop_path","title","overview","vote_average","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\n// import Auxil from \"../../../hoc/Auxil/Auxil\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nconst GenericMovies = (props) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [stateIds, setStateIds] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n  useEffect(() => fetchedMovies, []);\n  // let [stateMovies, setStateMovies] = use(State([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n  // useEffect(() => {}, [stateMovies]);\n  const searchContent = (event) => {\n    let searchInput = event.target.value;\n    // const [stateSearchInput, setStateSearchInput] = useState(searchInput);\n    fetchedMovies(\"captain\");\n  };\n  const fetchedMovies = async (searchInput) => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    // let finalMovies = [];\n    let urlString = \"\";\n    // let searchInput = props.searchBar.props.onChange();\n    if (searchInput !== \"\")\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        id_info = json.results.map((result) => {\n          return result.id; // returning id's of movies\n        });\n      });\n    // .catch((error) => console.log(error));\n    setStateIds(id_info);\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    stateIds.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n      myMovies[index] = await fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n\n          return json; // returning movie at an index location\n        });\n      // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n      // setStateMovies((myMovies) => {\n      //   return { myMovies };\n      // });\n      setStateMovies(myMovies);\n      setInputEntered(true);\n\n      // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      // console.log(stateMovies);\n\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    });\n\n    // return finalMovies;\n\n    // console.log(stmovies);\n    // });\n    // this.setState({ inputEntered: true });\n  };\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  const starterFunc = () => {\n    // if(this.state.)\n    if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n    if (inputEntered) {\n      // console.log(stateMovies);\n      // const presentMovies = stateMovies;\n\n      movies = (\n        <div>\n          {stateMovies.map((movie, index) => {\n            if (movie.poster_path) myPath = movie.poster_path;\n            else if (movie.backdrop_path) myPath = movie.backdrop_path;\n            else return <p key={index}> NO IMAGE! sorry :(</p>;\n            return (\n              // <div style={{ display: \"flex\" }}>\n              <Movie\n                key={movie.id}\n                title={movie.title}\n                image={imgUrl + myPath}\n                description={movie.overview}\n                name={movie.title}\n                rating={movie.vote_average}\n              />\n              // {console.log(movie.title)}\n              // </div>\n            );\n          })}\n        </div>\n      );\n      console.log(movies);\n    } else {\n      inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n    }\n  };\n\n  return (\n    <div>\n      {starterFunc}\n      {/* {props.searchBar} */}\n      {props.children}\n      {/* <SearchBar onChange={searchContent} /> */}\n      {searchBar}\n      {movies}\n\n      {inputEnablerMsg}\n    </div>\n  );\n};\nexport default GenericMovies;\n"]},"metadata":{},"sourceType":"module"}