{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState } from \"react\"; // import Auxil from \"../../../hoc/Auxil/Auxil\";\n\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = props => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [stateIds, setStateIds] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false); // useEffect(() => {}, [stateMovies]);\n\n  const searchContent = event => {\n    let searchInput = event.target.value;\n    fetchedMovies(\"captain\");\n  };\n\n  const fetchedMovies = async searchInput => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = []; // let finalMovies = [];\n\n    let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n    if (searchInput !== \"\") urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH); //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      console.log(json);\n      id_info = json.results.map(result => {\n        return result.id; // returning id's of movies\n      });\n    }).catch(error => console.log(error));\n    setStateIds(id_info); // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n\n    stateIds.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n\n      myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        return json; // returning movie at an index location\n      }); // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n      // setStateMovies((myMovies) => {\n      //   return { myMovies };\n      // });\n\n      setStateMovies(myMovies); // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      // console.log(stateMovies);\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    }); // return finalMovies;\n    // console.log(stmovies);\n    // });\n\n    setInputEntered(true); // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // if(this.state.)\n  // if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, stateMovies.map((movie, index) => {\n      if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Movie, {\n        key: movie.id,\n        title: movie.title,\n        image: imgUrl + myPath,\n        description: movie.overview,\n        name: movie.title,\n        rating: movie.vote_average,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }), console.log(title));\n    })); // console.log(movies);\n  } else {\n    inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 23\n      }\n    }, \"Please! enter a search input above! :)\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, props.children, /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: searchContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), movies, inputEnablerMsg);\n};\n\nexport default GenericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Movie","SearchBar","GenericMovies","props","stateMovies","setStateMovies","stateIds","setStateIds","inputEntered","setInputEntered","searchContent","event","searchInput","target","value","fetchedMovies","console","log","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","results","map","result","id","catch","error","index","baseMovieUrl","API_KEY_MOVIE","imgUrl","movies","myPath","inputEnablerMsg","searchBar","movie","poster_path","backdrop_path","display","title","overview","vote_average","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import Auxil from \"../../../hoc/Auxil/Auxil\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nconst GenericMovies = (props) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [stateIds, setStateIds] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n  // useEffect(() => {}, [stateMovies]);\n  const searchContent = (event) => {\n    let searchInput = event.target.value;\n    fetchedMovies(\"captain\");\n  };\n  const fetchedMovies = async (searchInput) => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    // let finalMovies = [];\n    let urlString = \"\";\n    // let searchInput = props.searchBar.props.onChange();\n    if (searchInput !== \"\")\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        id_info = json.results.map((result) => {\n          return result.id; // returning id's of movies\n        });\n      })\n      .catch((error) => console.log(error));\n    setStateIds(id_info);\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    stateIds.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n      myMovies[index] = await fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n\n          return json; // returning movie at an index location\n        });\n      // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n      // setStateMovies((myMovies) => {\n      //   return { myMovies };\n      // });\n      setStateMovies(myMovies);\n      // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      // console.log(stateMovies);\n\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    });\n\n    // return finalMovies;\n\n    // console.log(stmovies);\n    // });\n    setInputEntered(true);\n    // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // if(this.state.)\n  // if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n\n    movies = (\n      <div>\n        {stateMovies.map((movie, index) => {\n          if (movie.poster_path) myPath = movie.poster_path;\n          else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            <div style={{ display: \"flex\" }}>\n              <Movie\n                key={movie.id}\n                title={movie.title}\n                image={imgUrl + myPath}\n                description={movie.overview}\n                name={movie.title}\n                rating={movie.vote_average}\n              />\n              {console.log(title)}\n            </div>\n          );\n        })}\n      </div>\n    );\n    // console.log(movies);\n  } else {\n    inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  }\n\n  return (\n    <div>\n      {/* {props.searchBar} */}\n      {props.children}\n      <SearchBar onChange={searchContent} />\n      {/* {searchBar} */}\n      {movies}\n      {inputEnablerMsg}\n    </div>\n  );\n};\nexport default GenericMovies;\n"]},"metadata":{},"sourceType":"module"}