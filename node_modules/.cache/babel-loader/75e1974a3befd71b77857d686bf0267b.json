{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect } from \"react\";\nimport Auxil from \"../../../hoc/Auxil/Auxil\";\n\nconst genericMovies = props => {\n  // useEffect(console.log(fetchedMovies));\n  const fetchedMovies = async () => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    let urlString = \"\";\n\n    if (searchInput !== \"\") {\n      urlString = this.state.baseSearchUrl.concat(searchInput, this.state.API_KEY_SEARCH); //   else if(){\n      // }\n      // else if(){}\n\n      await fetch(urlString) // need to give urlString\n      .then(res => res.json()).then(json => {\n        console.log(json);\n        id_info = json.results.map(result => {\n          return result.id; // returning id's of movies\n        });\n      }).catch(error => console.log(error)); // console.log(id_info);\n      //   this.setState({\n      //     movies_ids: id_info, // setting an array of id's\n      //   });\n\n      id_info.map(async (id, index) => {\n        movieUrl = this.state.baseMovieUrl + id + this.state.API_KEY_MOVIE; // creating a movie from the id given\n\n        myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n          // console.log(json);\n          return json; // returning movie at an index location\n        }); // finalMovies = myMovies;\n\n        console.log(finalMovies); // .catch((error) => {\n        //   console.log(error);\n        // })\n        // this.setState({\n        //   movies: myMovies,\n        // });\n        // console.log(this.state.movies);\n\n        this.setState({\n          movies: myMovies\n        });\n      });\n      console.log(myMovies); // return finalMovies;\n\n      console.log(this.state.movies); // });\n\n      this.setState({\n        inputEntered: true\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Auxil, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nexport default genericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","Auxil","genericMovies","props","fetchedMovies","movieUrl","myMovies","id_info","finalMovies","urlString","searchInput","state","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","console","log","results","map","result","id","catch","error","index","baseMovieUrl","API_KEY_MOVIE","setState","movies","inputEntered","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIC,WAAW,KAAK,EAApB,EAAwB;AACtBD,MAAAA,SAAS,GAAG,KAAKE,KAAL,CAAWC,aAAX,CAAyBC,MAAzB,CACVH,WADU,EAEV,KAAKC,KAAL,CAAWG,cAFD,CAAZ,CADsB,CAMtB;AACA;AACA;;AAEA,YAAMC,KAAK,CAACN,SAAD,CAAL,CAAiB;AAAjB,OACHO,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGE,IAAD,IAAU;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAX,QAAAA,OAAO,GAAGW,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,MAAD,IAAY;AACrC,iBAAOA,MAAM,CAACC,EAAd,CADqC,CACnB;AACnB,SAFS,CAAV;AAGD,OAPG,EAQHC,KARG,CAQIC,KAAD,IAAWP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CARd,CAAN,CAVsB,CAmBtB;AACA;AACA;AACA;;AACAnB,MAAAA,OAAO,CAACe,GAAR,CAAY,OAAOE,EAAP,EAAWG,KAAX,KAAqB;AAC/BtB,QAAAA,QAAQ,GAAG,KAAKM,KAAL,CAAWiB,YAAX,GAA0BJ,EAA1B,GAA+B,KAAKb,KAAL,CAAWkB,aAArD,CAD+B,CACqC;;AACpEvB,QAAAA,QAAQ,CAACqB,KAAD,CAAR,GAAkB,MAAMZ,KAAK,CAACV,QAAD,CAAL,CACrBW,IADqB,CACfC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADO,EAErBF,IAFqB,CAEfE,IAAD,IAAU;AACd;AACA,iBAAOA,IAAP,CAFc,CAED;AACd,SALqB,CAAxB,CAF+B,CAQ/B;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ,EAT+B,CAU/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAKsB,QAAL,CAAc;AACZC,UAAAA,MAAM,EAAEzB;AADI,SAAd;AAGD,OApBD;AAqBAa,MAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ,EA5CsB,CA6CtB;;AAEAa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWoB,MAAvB,EA/CsB,CAgDtB;;AACA,WAAKD,QAAL,CAAc;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD;AACF,GA1DD;;AA2DA,sBAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQ7B,KAAK,CAAC8B,QAAd,CAAP;AACD,CA9DD;;AA+DA,eAAe/B,aAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport Auxil from \"../../../hoc/Auxil/Auxil\";\nconst genericMovies = (props) => {\n  // useEffect(console.log(fetchedMovies));\n  const fetchedMovies = async () => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    let urlString = \"\";\n\n    if (searchInput !== \"\") {\n      urlString = this.state.baseSearchUrl.concat(\n        searchInput,\n        this.state.API_KEY_SEARCH\n      );\n\n      //   else if(){\n      // }\n      // else if(){}\n\n      await fetch(urlString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          console.log(json);\n          id_info = json.results.map((result) => {\n            return result.id; // returning id's of movies\n          });\n        })\n        .catch((error) => console.log(error));\n      // console.log(id_info);\n      //   this.setState({\n      //     movies_ids: id_info, // setting an array of id's\n      //   });\n      id_info.map(async (id, index) => {\n        movieUrl = this.state.baseMovieUrl + id + this.state.API_KEY_MOVIE; // creating a movie from the id given\n        myMovies[index] = await fetch(movieUrl)\n          .then((res) => res.json())\n          .then((json) => {\n            // console.log(json);\n            return json; // returning movie at an index location\n          });\n        // finalMovies = myMovies;\n        console.log(finalMovies);\n        // .catch((error) => {\n        //   console.log(error);\n        // })\n        // this.setState({\n        //   movies: myMovies,\n        // });\n        // console.log(this.state.movies);\n        this.setState({\n          movies: myMovies,\n        });\n      });\n      console.log(myMovies);\n      // return finalMovies;\n\n      console.log(this.state.movies);\n      // });\n      this.setState({ inputEntered: true });\n    }\n  };\n  return <Auxil>{props.children}</Auxil>;\n};\nexport default genericMovies;\n"]},"metadata":{},"sourceType":"module"}