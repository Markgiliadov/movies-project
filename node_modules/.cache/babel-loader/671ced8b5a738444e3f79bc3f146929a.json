{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst GeneralMovies = props => {\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  let searchInput = \"hero\";\n\n  const useFetch = searchInput => {\n    useEffect(async () => {\n      let movieUrl = \"\";\n      let myMovies = [];\n      let id_info = []; // let myMovies = [];\n      // let finalMovies = [];\n\n      let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n      console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n      if (searchInput !== \"\") urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(urlString);\n      await fetch(urlString) // need to give urlString\n      .then(res => res.json()).then(json => {\n        // console.log(json);\n        for (const [i, result] of json.results.entries()) {\n          // console.log(\"index\" + i + \"value\" + result.id);\n          id_info[i] = result.id; //   console.log(result);\n          //   const myId = result.id;\n          //   setStateIds((prevIds) => [...id_info]);\n        } // id_info = json.results.map((result) => {\n        //   return result.id; // returning id's of movies\n        // });\n\n      }); // .catch((error) => console.log(error));\n\n      console.log(id_info); // console.log(inputReady);\n\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; //   console.log(\"i? \" + i + \" val? \" + id);\n\n        myMovies[i] = await fetch(movieUrl).then(res => res.json()).then(json => {\n          // console.log(json);\n          //   console.log(\"index \" + i + \"val \" + json);\n          return json;\n        }); //   setStateMovies(myMovies);\n        //   console.log(stateMovies);\n      }\n\n      console.log(myMovies);\n      setStateMovies(() => myMovies); // console.log(stateMovies);\n\n      setInputEntered(true);\n    }, []);\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // const starterFunc = () => {\n  // if(this.state.)\n\n  if (props.baseSearchUrl) searchBar = /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: searchContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 40\n    }\n  });\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    console.log(stateMovies);\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, stateMovies.map((movie, index) => {\n      if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n      return (\n        /*#__PURE__*/\n        // <div style={{ display: \"flex\" }}>\n        React.createElement(Movie, {\n          key: movie.id,\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }\n        }) // {console.log(movie.title)}\n        // </div>\n\n      );\n    }));\n    console.log(movies);\n  } else {\n    inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 23\n      }\n    }, \"Please! enter a search input above! :)\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, movies, searchBar);\n};\n\nexport default GeneralMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js"],"names":["React","useEffect","useState","GeneralMovies","props","stateIds","setStateIds","stateMovies","setStateMovies","inputEntered","setInputEntered","searchInput","useFetch","movieUrl","myMovies","id_info","urlString","console","log","baseSearchUrl","API_KEY_SEARCH","concat","fetch","then","res","json","i","result","results","entries","id","baseMovieUrl","API_KEY_MOVIE","imgUrl","movies","myPath","inputEnablerMsg","searchBar","searchContent","map","movie","index","poster_path","backdrop_path","title","overview","vote_average"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst GeneralMovies = (props) => {\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  let searchInput = \"hero\";\n  const useFetch = (searchInput) => {\n    useEffect(async () => {\n      let movieUrl = \"\";\n      let myMovies = [];\n      let id_info = [];\n      // let myMovies = [];\n      // let finalMovies = [];\n      let urlString = \"\";\n      // let searchInput = props.searchBar.props.onChange();\n      console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n      if (searchInput !== \"\")\n        urlString = props.baseSearchUrl.concat(\n          searchInput,\n          props.API_KEY_SEARCH\n        );\n\n      console.log(urlString);\n      await fetch(urlString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n          for (const [i, result] of json.results.entries()) {\n            // console.log(\"index\" + i + \"value\" + result.id);\n            id_info[i] = result.id;\n            //   console.log(result);\n            //   const myId = result.id;\n            //   setStateIds((prevIds) => [...id_info]);\n          }\n          // id_info = json.results.map((result) => {\n          //   return result.id; // returning id's of movies\n          // });\n        });\n      // .catch((error) => console.log(error));\n      console.log(id_info);\n      // console.log(inputReady);\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        //   console.log(\"i? \" + i + \" val? \" + id);\n        myMovies[i] = await fetch(movieUrl)\n          .then((res) => res.json())\n          .then((json) => {\n            // console.log(json);\n            //   console.log(\"index \" + i + \"val \" + json);\n            return json;\n          });\n        //   setStateMovies(myMovies);\n        //   console.log(stateMovies);\n      }\n      console.log(myMovies);\n      setStateMovies(() => myMovies);\n      // console.log(stateMovies);\n      setInputEntered(true);\n    }, []);\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // const starterFunc = () => {\n  // if(this.state.)\n  if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    console.log(stateMovies);\n    movies = (\n      <div>\n        {stateMovies.map((movie, index) => {\n          if (movie.poster_path) myPath = movie.poster_path;\n          else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            // <div style={{ display: \"flex\" }}>\n            <Movie\n              key={movie.id}\n              title={movie.title}\n              image={imgUrl + myPath}\n              description={movie.overview}\n              name={movie.title}\n              rating={movie.vote_average}\n            />\n            // {console.log(movie.title)}\n            // </div>\n          );\n        })}\n      </div>\n    );\n    console.log(movies);\n  } else {\n    inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  }\n\n  return (\n    <div>\n      {movies}\n      {searchBar}\n    </div>\n  );\n};\n\nexport default GeneralMovies;\n"]},"metadata":{},"sourceType":"module"}