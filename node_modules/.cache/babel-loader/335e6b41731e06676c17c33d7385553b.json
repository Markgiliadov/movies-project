{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/searchMovies/searchMovies.js\";\nimport React from \"react\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst SearchMovies = props => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useStatE(false);\n\n  const searchingMovies = async searchInput => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n\n    if (searchInput !== \"\") {\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n      await fetch(urlString) // need to give urlString\n      .then(res => res.json()).then(json => {\n        for (const [i, result] of json.results.entries()) {\n          id_info[i] = result.id;\n        }\n      }).catch(error => console.log(error));\n      console.log(\"i am here\" + id_info);\n\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        console.log(movieUrl);\n        myMovies[i] = await fetch(movieUrl).then(async res => await res.json()).then(async json => await json);\n      }\n\n      setStateMovies(myMovies);\n      setInputEntered(true);\n    }\n  };\n\n  const handleChange = event => {\n    searchMovies(event.target.value);\n  };\n\n  let movies = null;\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let myPath = \"\";\n\n  if (inputEntered) {\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, stateMovies.map((index, movie) => {\n      if (movie.poster_path) {\n        myPath = movie.poster_path;\n        console.log(movie);\n      } else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, \" NO IMAGE! sorry :(\");\n\n      return /*#__PURE__*/React.createElement(Movie, {\n        key: movie.id,\n        title: movie.title,\n        image: imgUrl + myPath,\n        description: movie.overview,\n        name: movie.title,\n        rating: movie.vote_average,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      });\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), movies);\n};\n\nexport default SearchMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/searchMovies/searchMovies.js"],"names":["React","SearchBar","SearchMovies","props","stateMovies","setStateMovies","useState","inputEntered","setInputEntered","useStatE","searchingMovies","searchInput","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","console","log","fetch","then","res","json","i","result","results","entries","id","catch","error","baseMovieUrl","API_KEY_MOVIE","handleChange","event","searchMovies","target","value","movies","inputEnablerMsg","searchBar","imgUrl","myPath","map","index","movie","poster_path","backdrop_path","title","overview","vote_average"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nconst SearchMovies = (props) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useStatE(false);\n  const searchingMovies = async (searchInput) => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n    if (searchInput !== \"\") {\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n      await fetch(urlString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          for (const [i, result] of json.results.entries()) {\n            id_info[i] = result.id;\n          }\n        })\n        .catch((error) => console.log(error));\n      console.log(\"i am here\" + id_info);\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        console.log(movieUrl);\n        myMovies[i] = await fetch(movieUrl)\n          .then(async (res) => await res.json())\n          .then(async (json) => await json);\n      }\n      setStateMovies(myMovies);\n      setInputEntered(true);\n    }\n  };\n\n  const handleChange = (event) => {\n    searchMovies(event.target.value);\n  };\n\n  let movies = null;\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let myPath = \"\";\n  if (inputEntered) {\n    <div>\n      {stateMovies.map((index, movie) => {\n        if (movie.poster_path) {\n          myPath = movie.poster_path;\n          console.log(movie);\n        } else if (movie.backdrop_path) myPath = movie.backdrop_path;\n        else return <p key={index}> NO IMAGE! sorry :(</p>;\n        return (\n          <Movie\n            key={movie.id}\n            title={movie.title}\n            image={imgUrl + myPath}\n            description={movie.overview}\n            name={movie.title}\n            rating={movie.vote_average}\n          />\n        );\n      })}\n    </div>;\n  }\n  return (\n    <div>\n      <SearchBar onChange={handleChange} />\n      {movies}\n    </div>\n  );\n};\n\nexport default SearchMovies;\n"]},"metadata":{},"sourceType":"module"}