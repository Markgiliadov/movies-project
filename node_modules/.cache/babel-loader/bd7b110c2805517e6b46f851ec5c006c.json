{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState } from \"react\"; // import Auxil from \"../../../hoc/Auxil/Auxil\";\n\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = props => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n  useEffect(() => {\n    // console.log(stateMovies);\n    if (inputEntered) {\n      movies = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }\n      }, stateMovies.map((movie, index) => {\n        if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }\n        }, \" NO IMAGE! sorry :(\");\n        return (\n          /*#__PURE__*/\n          // <div>\n          React.createElement(Movie, {\n            key: movie.id,\n            title: movie.title,\n            image: imgUrl + myPath,\n            description: movie.overview,\n            name: movie.title,\n            rating: movie.vote_average,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 15\n            }\n          }) // </div>\n\n        );\n      })); // console.log(movies);\n    } else {\n      inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }\n      }, \"Please! enter a search input above! :)\");\n    }\n  }, [stateMovies]);\n\n  const searchContent = event => {\n    let searchInput = event.target.value;\n    fetchedMovies(searchInput);\n  };\n\n  const fetchedMovies = async searchInput => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = []; // let finalMovies = [];\n\n    let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n    if (searchInput !== \"\") urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH); //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      console.log(json);\n      id_info = json.results.map(result => {\n        return result.id; // returning id's of movies\n      });\n    }).catch(error => console.log(error));\n    console.log(id_info); //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n\n    id_info.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n\n      myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n        console.log(json);\n        return json; // returning movie at an index location\n      });\n      setStateMovies(myMovies); // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n\n      console.log(stateMovies); // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    }); // return finalMovies;\n    // console.log(stmovies);\n    // });\n\n    setInputEntered(true); // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // if(this.state.)\n  // if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, props.children, /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: searchContent.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), movies, inputEnablerMsg);\n};\n\nexport default GenericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Movie","SearchBar","GenericMovies","props","stateMovies","setStateMovies","inputEntered","setInputEntered","movies","map","movie","index","poster_path","myPath","backdrop_path","id","title","imgUrl","overview","vote_average","inputEnablerMsg","searchContent","event","searchInput","target","value","fetchedMovies","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","console","log","results","result","catch","error","baseMovieUrl","API_KEY_MOVIE","searchBar","children","bind"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import Auxil from \"../../../hoc/Auxil/Auxil\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nconst GenericMovies = (props) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n  useEffect(() => {\n    // console.log(stateMovies);\n\n    if (inputEntered) {\n      movies = (\n        <div>\n          {stateMovies.map((movie, index) => {\n            if (movie.poster_path) myPath = movie.poster_path;\n            else if (movie.backdrop_path) myPath = movie.backdrop_path;\n            else return <p key={index}> NO IMAGE! sorry :(</p>;\n            return (\n              // <div>\n              <Movie\n                key={movie.id}\n                title={movie.title}\n                image={imgUrl + myPath}\n                description={movie.overview}\n                name={movie.title}\n                rating={movie.vote_average}\n              />\n              // </div>\n            );\n          })}\n        </div>\n      );\n      // console.log(movies);\n    } else {\n      inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n    }\n  }, [stateMovies]);\n  const searchContent = (event) => {\n    let searchInput = event.target.value;\n    fetchedMovies(searchInput);\n  };\n  const fetchedMovies = async (searchInput) => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    // let finalMovies = [];\n    let urlString = \"\";\n    // let searchInput = props.searchBar.props.onChange();\n    if (searchInput !== \"\")\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        id_info = json.results.map((result) => {\n          return result.id; // returning id's of movies\n        });\n      })\n      .catch((error) => console.log(error));\n    console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    id_info.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n      myMovies[index] = await fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          console.log(json);\n\n          return json; // returning movie at an index location\n        });\n      setStateMovies(myMovies);\n      // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      console.log(stateMovies);\n\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    });\n\n    // return finalMovies;\n\n    // console.log(stmovies);\n    // });\n    setInputEntered(true);\n    // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // if(this.state.)\n  // if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  return (\n    <div>\n      {/* {props.searchBar} */}\n      {props.children}\n      <SearchBar onChange={searchContent.bind(this)} />\n      {/* {searchBar} */}\n      {movies}\n      {inputEnablerMsg}\n    </div>\n  );\n};\nexport default GenericMovies;\n"]},"metadata":{},"sourceType":"module"}