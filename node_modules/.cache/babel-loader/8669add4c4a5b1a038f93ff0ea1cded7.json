{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Auxil from \"../../../hoc/Auxil/Auxil\";\n\nconst genericMovies = props => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false); // useEffect(console.log(fetchedMovies));\n\n  const fetchedMovies = async () => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    let urlString = \"\"; // if (searchInput !== \"\") {\n    // urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      console.log(json);\n      id_info = json.results.map(result => {\n        return result.id; // returning id's of movies\n      });\n    }).catch(error => console.log(error)); // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n\n    id_info.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n\n      myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        return json; // returning movie at an index location\n      }); // finalMovies = myMovies;\n\n      console.log(finalMovies); // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n\n      setStateMovies(myMovies);\n    });\n    console.log(stateMovies); // return finalMovies;\n    // console.log(stmovies);\n    // });\n\n    setInputEntered(true); // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // if(this.state.)\n\n  if (inputEntered) {\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, stateMovies.map((movie, index) => {\n      if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n      return (\n        /*#__PURE__*/\n        // <div style={{ display: \"flex\" }}>\n        React.createElement(Movie, {\n          key: movie.id,\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }\n        }) // </div>\n\n      );\n    })); // console.log(movies);\n  } else {\n    inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }, \"Please! enter a search input above! :)\");\n  }\n\n  return /*#__PURE__*/React.createElement(Auxil, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, props.searchBar, movies, inputEnablerMsg);\n};\n\nexport default genericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Auxil","genericMovies","props","stateMovies","setStateMovies","inputEntered","setInputEntered","fetchedMovies","movieUrl","myMovies","id_info","finalMovies","urlString","fetch","then","res","json","console","log","results","map","result","id","catch","error","index","baseMovieUrl","API_KEY_MOVIE","imgUrl","movies","myPath","inputEnablerMsg","searchBar","movie","poster_path","backdrop_path","title","overview","vote_average"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Auxil from \"../../../hoc/Auxil/Auxil\";\nconst genericMovies = (props) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n  // useEffect(console.log(fetchedMovies));\n  const fetchedMovies = async () => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    let urlString = \"\";\n\n    // if (searchInput !== \"\") {\n    // urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        id_info = json.results.map((result) => {\n          return result.id; // returning id's of movies\n        });\n      })\n      .catch((error) => console.log(error));\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    id_info.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      myMovies[index] = await fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n          return json; // returning movie at an index location\n        });\n      // finalMovies = myMovies;\n      console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n      setStateMovies(myMovies);\n    });\n    console.log(stateMovies);\n    // return finalMovies;\n\n    // console.log(stmovies);\n    // });\n    setInputEntered(true);\n    // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // if(this.state.)\n  if (inputEntered) {\n    movies = (\n      <div>\n        {stateMovies.map((movie, index) => {\n          if (movie.poster_path) myPath = movie.poster_path;\n          else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            // <div style={{ display: \"flex\" }}>\n            <Movie\n              key={movie.id}\n              title={movie.title}\n              image={imgUrl + myPath}\n              description={movie.overview}\n              name={movie.title}\n              rating={movie.vote_average}\n            />\n            // </div>\n          );\n        })}\n      </div>\n    );\n    // console.log(movies);\n  } else {\n    inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  }\n\n  return (\n    <Auxil>\n      {props.searchBar}\n      {movies}\n      {inputEnablerMsg}\n    </Auxil>\n  );\n};\nexport default genericMovies;\n"]},"metadata":{},"sourceType":"module"}