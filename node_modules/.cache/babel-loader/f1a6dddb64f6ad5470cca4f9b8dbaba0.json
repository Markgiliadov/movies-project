{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\n\nconst useFetch = async (props, searchInput) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  let myInput = searchInput;\n  console.log(myInput);\n  useEffect(async () => {\n    fetchingTheMovies(myInput);\n  }, []);\n\n  const fetchingTheMovies = async searchInput => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n\n    if (searchInput !== \"\") {\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n      await fetch(urlString) // need to give urlString\n      .then(res => res.json()).then(json => {\n        for (const [i, result] of json.results.entries()) {\n          id_info[i] = result.id;\n        }\n      }).catch(error => console.log(error));\n      console.log(\"i am here\" + id_info);\n\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        console.log(movieUrl);\n        myMovies[i] = await fetch(movieUrl).then(async res => await res.json()).then(async json => await json);\n      }\n\n      setStateMovies(myMovies);\n    }\n  };\n\n  console.log(stateMovies);\n  return [];\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/useFetch.js"],"names":["React","useState","useEffect","useFetch","props","searchInput","stateMovies","setStateMovies","myInput","console","log","fetchingTheMovies","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","i","result","results","entries","id","catch","error","baseMovieUrl","API_KEY_MOVIE"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,QAAQ,GAAG,OAAOC,KAAP,EAAcC,WAAd,KAA8B;AAC7C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,MAAIO,OAAO,GAAGH,WAAd;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAN,EAAAA,SAAS,CAAC,YAAY;AACpBS,IAAAA,iBAAiB,CAACH,OAAD,CAAjB;AACD,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMG,iBAAiB,GAAG,MAAON,WAAP,IAAuB;AAC/C,QAAIO,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIV,WAAW,KAAK,EAApB,EAAwB;AACtBU,MAAAA,SAAS,GAAGX,KAAK,CAACY,aAAN,CAAoBC,MAApB,CAA2BZ,WAA3B,EAAwCD,KAAK,CAACc,cAA9C,CAAZ;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASK,SAAT,GAAqB,UAArB,GAAkCV,WAA9C;AACA,YAAMc,KAAK,CAACJ,SAAD,CAAL,CAAiB;AAAjB,OACHK,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGE,IAAD,IAAU;AACd,aAAK,MAAM,CAACC,CAAD,EAAIC,MAAJ,CAAX,IAA0BF,IAAI,CAACG,OAAL,CAAaC,OAAb,EAA1B,EAAkD;AAChDZ,UAAAA,OAAO,CAACS,CAAD,CAAP,GAAaC,MAAM,CAACG,EAApB;AACD;AACF,OANG,EAOHC,KAPG,CAOIC,KAAD,IAAWpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAPd,CAAN;AAQApB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcI,OAA1B;;AACA,WAAK,MAAM,CAACS,CAAD,EAAII,EAAJ,CAAX,IAAsBb,OAAO,CAACY,OAAR,EAAtB,EAAyC;AACvCd,QAAAA,QAAQ,GAAGR,KAAK,CAAC0B,YAAN,GAAqBH,EAArB,GAA0BvB,KAAK,CAAC2B,aAA3C;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACAC,QAAAA,QAAQ,CAACU,CAAD,CAAR,GAAc,MAAMJ,KAAK,CAACP,QAAD,CAAL,CACjBQ,IADiB,CACZ,MAAOC,GAAP,IAAe,MAAMA,GAAG,CAACC,IAAJ,EADT,EAEjBF,IAFiB,CAEZ,MAAOE,IAAP,IAAgB,MAAMA,IAFV,CAApB;AAGD;;AACDf,MAAAA,cAAc,CAACM,QAAD,CAAd;AACD;AACF,GA1BD;;AA2BAJ,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,SAAO,EAAP;AACD,CApCD;;AAsCA,eAAeH,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst useFetch = async (props, searchInput) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  let myInput = searchInput;\n  console.log(myInput);\n  useEffect(async () => {\n    fetchingTheMovies(myInput);\n  }, []);\n  const fetchingTheMovies = async (searchInput) => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n    if (searchInput !== \"\") {\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n      await fetch(urlString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          for (const [i, result] of json.results.entries()) {\n            id_info[i] = result.id;\n          }\n        })\n        .catch((error) => console.log(error));\n      console.log(\"i am here\" + id_info);\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        console.log(movieUrl);\n        myMovies[i] = await fetch(movieUrl)\n          .then(async (res) => await res.json())\n          .then(async (json) => await json);\n      }\n      setStateMovies(myMovies);\n    }\n  };\n  console.log(stateMovies);\n  return [];\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}