{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/Movies.js\";\nimport React, { Component } from \"react\";\nimport Movie from \"../../components/Movie/Movie\"; // import Button from \"../../components/Button/Button\";\n\nimport classes from \"./Movies.module.css\";\nimport Searchbar from \"../../components/Searchbar/Searchbar\";\nimport GenericMovies from \"./GenericMovies/GenericMovies\"; // import Rating from \"../../components/Movie/Rating/Rating\";\n\nclass Movies extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchingMovies = async ( // urlString,\n    // searchInput,\n    // popCheck\n    searchInput, baseSearchUrl, baseUrl, API_KEY) => {\n      let movieUrl = \"\";\n      let myMovies = [];\n      let id_info = [];\n      let finalMovies = []; // await\n      // let movieUrl = \"\";\n      // const API_KEY = \"?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n      // const languageFilter = \"&language=he-IL\";\n      // let myMovies = null;\n      // let id_info = [];\n      // const baseSearchUrl = \"https://api.themoviedb.org/3/search/movie?query=\";\n      // const baseUrl = \"https://api.themoviedb.org/3/movie/\";\n      // let urlString = baseUrl.concat(\"top_rated\", API_KEY);\n      //  console.log(urlString);\n      // if (searchInput !== \"\" || popCheck) {\n      // if (popCheck)\n      // urlString =\n      //   \"https://api.themoviedb.org/3/movie/now_playing?api_key=d0a9ee76df15c9c8e455000b78e70a56&language=he-IL&page=1\";\n      // else\n      // let urlSearchString =\n      //   \"https://api.themoviedb.org/3/search/movie?query=\" +\n      //   searchInput +\n      //   \"&api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n      // if (searchInput !== \"\") {\n      //   myMovies = (\n      //     // console.log(\n      //   );\n      // );\n      // console.log(myMovies);\n      // await fetch(urlString)\n      //   .then((res) => res.json())\n      //   .then((json) => {\n      //     console.log(json);\n      //     id_info = json.results.map((result) => {\n      //       return result.id; // returning id's of movies\n      //     });\n      //   })\n      //   .catch((error) => console.log(error));\n      // // console.log(id_info);\n      // this.setState({\n      //   movies_ids: id_info, // setting an array of id's\n      // });\n      // this.state.movies_ids.map(async (id, index) => {\n      //   movieUrl = baseUrl + id + API_KEY; // creating a movie from the id given\n      //   myMovies[index] = await fetch(movieUrl)\n      //     .then((res) => res.json())\n      //     .then((json) => {\n      //       // console.log(json);\n      //       return json; // returning movie at an index location\n      //     });\n      //   // .catch((error) => {\n      //   //   console.log(error);\n      //   // })\n      // const API_KEY = \"?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n      // const languageFilter = \"&language=he-IL\";\n      // const baseSearchUrl = \"https://api.themoviedb.org/3/search/movie?query=\";\n      // const baseUrl = \"https://api.themoviedb.org/3/movie/\";\n      // let urlString = baseUrl.concat(\"top_rated\", API_KEY);\n\n      let urlSearchString = baseSearchUrl + searchInput + API_KEY;\n\n      if (searchInput !== \"\") {\n        await fetch(urlSearchString) // need to give urlString\n        .then(res => res.json()).then(json => {\n          console.log(json);\n          id_info = json.results.map(result => {\n            return result.id; // returning id's of movies\n          });\n        }).catch(error => console.log(error)); // console.log(id_info);\n        //   this.setState({\n        //     movies_ids: id_info, // setting an array of id's\n        //   });\n\n        id_info.map(async (id, index) => {\n          movieUrl = baseUrl + id + API_KEY; // creating a movie from the id given\n\n          myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n            // console.log(json);\n            return json; // returning movie at an index location\n          });\n          finalMovies = myMovies;\n          console.log(finalMovies); // .catch((error) => {\n          //   console.log(error);\n          // })\n          // this.setState({\n          //   movies: myMovies,\n          // });\n          // console.log(this.state.movies);\n\n          this.setState({\n            movies: finalMovies\n          });\n        });\n        console.log(myMovies); // return finalMovies;\n\n        console.log(this.state.movies); // });\n\n        this.setState({\n          inputEntered: true\n        });\n      } else {\n        const inputEnabler = this.state.inputEntered;\n        this.setState({\n          inputEntered: !inputEnabler\n        });\n      } // .catch((error) => {\n      //   console.log(error);\n      // })\n      // console.log(myMovies);\n\n    };\n\n    this.searchContent = event => {\n      let searchInput = event.target.value;\n      let urlSearchString = \"https://api.themoviedb.org/3/search/movie?query=\" + searchInput + \"&api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n      const baseSearchUrl = \"https://api.themoviedb.org/3/search/movie?query=\";\n      const baseUrl = \"https://api.themoviedb.org/3/movie/\"; // const API_KEY = \"?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n\n      const API_KEY = \"&api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n      this.fetchingMovies(searchInput, baseSearchUrl, // urlSearchString,\n      baseUrl, API_KEY);\n    };\n\n    this.presentPopularMovies = () => {\n      this.fetchingMovies(\"\", true);\n    };\n\n    this.state = {\n      movies: [],\n      movies_ids: [],\n      showMovies: true,\n      inputEntered: false\n    };\n  }\n\n  componentDidMount() {// this.fetchingMovies(\"\", true);\n    // this.fetchingMovies(\"s\", false);\n  }\n\n  // presentMovies = () => {\n  //   const doesShow = this.state.showMovies;\n  //   // this.setState({ showMovies: !doesShow });\n  // };\n  // getImgUrl = (baseUrl, path){\n  //   if(path)\n  // }\n  render() {\n    let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n    let movies = null;\n    let myPath = \"\";\n    let inputEnablerMsg = null;\n    let searchBar = null; // if(this.state.)\n\n    if (this.state.inputEntered) {\n      movies = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }\n      }, this.state.movies.map((movie, index) => {\n        if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }\n        }, \" NO IMAGE! sorry :(\");\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: movie.id,\n          style: {\n            display: \"flex\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Movie, {\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }\n        }));\n      })); // console.log(movies);\n    } else {\n      inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }\n      }, \"Please! enter a search input above! :)\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Searchbar, {\n      onChange: this.searchContent.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }), movies, inputEnablerMsg);\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/Movies.js"],"names":["React","Component","Movie","classes","Searchbar","GenericMovies","Movies","constructor","props","fetchingMovies","searchInput","baseSearchUrl","baseUrl","API_KEY","movieUrl","myMovies","id_info","finalMovies","urlSearchString","fetch","then","res","json","console","log","results","map","result","id","catch","error","index","setState","movies","state","inputEntered","inputEnabler","searchContent","event","target","value","presentPopularMovies","movies_ids","showMovies","componentDidMount","render","imgUrl","myPath","inputEnablerMsg","searchBar","movie","poster_path","backdrop_path","display","title","overview","vote_average","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Movie from \"../../components/Movie/Movie\";\n// import Button from \"../../components/Button/Button\";\nimport classes from \"./Movies.module.css\";\nimport Searchbar from \"../../components/Searchbar/Searchbar\";\nimport GenericMovies from \"./GenericMovies/GenericMovies\";\n// import Rating from \"../../components/Movie/Rating/Rating\";\nclass Movies extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      movies_ids: [],\n      showMovies: true,\n      inputEntered: false,\n    };\n  }\n\n  componentDidMount() {\n    // this.fetchingMovies(\"\", true);\n    // this.fetchingMovies(\"s\", false);\n  }\n\n  fetchingMovies = async (\n    // urlString,\n    // searchInput,\n    // popCheck\n    searchInput,\n    baseSearchUrl,\n    baseUrl,\n    API_KEY\n  ) => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    // await\n    // let movieUrl = \"\";\n    // const API_KEY = \"?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n    // const languageFilter = \"&language=he-IL\";\n    // let myMovies = null;\n    // let id_info = [];\n    // const baseSearchUrl = \"https://api.themoviedb.org/3/search/movie?query=\";\n    // const baseUrl = \"https://api.themoviedb.org/3/movie/\";\n    // let urlString = baseUrl.concat(\"top_rated\", API_KEY);\n\n    //  console.log(urlString);\n    // if (searchInput !== \"\" || popCheck) {\n    // if (popCheck)\n    // urlString =\n    //   \"https://api.themoviedb.org/3/movie/now_playing?api_key=d0a9ee76df15c9c8e455000b78e70a56&language=he-IL&page=1\";\n    // else\n    // let urlSearchString =\n    //   \"https://api.themoviedb.org/3/search/movie?query=\" +\n    //   searchInput +\n    //   \"&api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n    // if (searchInput !== \"\") {\n    //   myMovies = (\n    //     // console.log(\n\n    //   );\n    // );\n    // console.log(myMovies);\n\n    // await fetch(urlString)\n    //   .then((res) => res.json())\n    //   .then((json) => {\n    //     console.log(json);\n    //     id_info = json.results.map((result) => {\n    //       return result.id; // returning id's of movies\n    //     });\n    //   })\n    //   .catch((error) => console.log(error));\n    // // console.log(id_info);\n    // this.setState({\n    //   movies_ids: id_info, // setting an array of id's\n    // });\n    // this.state.movies_ids.map(async (id, index) => {\n    //   movieUrl = baseUrl + id + API_KEY; // creating a movie from the id given\n    //   myMovies[index] = await fetch(movieUrl)\n    //     .then((res) => res.json())\n    //     .then((json) => {\n    //       // console.log(json);\n\n    //       return json; // returning movie at an index location\n    //     });\n    //   // .catch((error) => {\n    //   //   console.log(error);\n    //   // })\n\n    // const API_KEY = \"?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n    // const languageFilter = \"&language=he-IL\";\n    // const baseSearchUrl = \"https://api.themoviedb.org/3/search/movie?query=\";\n    // const baseUrl = \"https://api.themoviedb.org/3/movie/\";\n    // let urlString = baseUrl.concat(\"top_rated\", API_KEY);\n\n    let urlSearchString = baseSearchUrl + searchInput + API_KEY;\n    if (searchInput !== \"\") {\n      await fetch(urlSearchString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          console.log(json);\n          id_info = json.results.map((result) => {\n            return result.id; // returning id's of movies\n          });\n        })\n        .catch((error) => console.log(error));\n      // console.log(id_info);\n      //   this.setState({\n      //     movies_ids: id_info, // setting an array of id's\n      //   });\n      id_info.map(async (id, index) => {\n        movieUrl = baseUrl + id + API_KEY; // creating a movie from the id given\n        myMovies[index] = await fetch(movieUrl)\n          .then((res) => res.json())\n          .then((json) => {\n            // console.log(json);\n            return json; // returning movie at an index location\n          });\n        finalMovies = myMovies;\n        console.log(finalMovies);\n        // .catch((error) => {\n        //   console.log(error);\n        // })\n        // this.setState({\n        //   movies: myMovies,\n        // });\n        // console.log(this.state.movies);\n        this.setState({\n          movies: finalMovies,\n        });\n      });\n      console.log(myMovies);\n      // return finalMovies;\n\n      console.log(this.state.movies);\n      // });\n\n      this.setState({ inputEntered: true });\n    } else {\n      const inputEnabler = this.state.inputEntered;\n      this.setState({ inputEntered: !inputEnabler });\n    }\n    // .catch((error) => {\n    //   console.log(error);\n    // })\n\n    // console.log(myMovies);\n  };\n\n  // fetchingPopularMovies = async () => {\n  //   let popUrl =\n  //     \"https://api.themoviedb.org/3/movie/popular?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n  //   fetch(popUrl)\n  //   .then(res => console.);\n  // };\n  searchContent = (event) => {\n    let searchInput = event.target.value;\n    let urlSearchString =\n      \"https://api.themoviedb.org/3/search/movie?query=\" +\n      searchInput +\n      \"&api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n    const baseSearchUrl = \"https://api.themoviedb.org/3/search/movie?query=\";\n    const baseUrl = \"https://api.themoviedb.org/3/movie/\";\n    // const API_KEY = \"?api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n    const API_KEY = \"&api_key=d0a9ee76df15c9c8e455000b78e70a56\";\n\n    this.fetchingMovies(\n      searchInput,\n      baseSearchUrl,\n      // urlSearchString,\n      baseUrl,\n      API_KEY\n    );\n  };\n  presentPopularMovies = () => {\n    this.fetchingMovies(\"\", true);\n  };\n  // presentMovies = () => {\n  //   const doesShow = this.state.showMovies;\n  //   // this.setState({ showMovies: !doesShow });\n  // };\n\n  // getImgUrl = (baseUrl, path){\n\n  //   if(path)\n  // }\n  render() {\n    let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n\n    let movies = null;\n    let myPath = \"\";\n    let inputEnablerMsg = null;\n    let searchBar = null;\n    // if(this.state.)\n    if (this.state.inputEntered) {\n      movies = (\n        <div>\n          {this.state.movies.map((movie, index) => {\n            if (movie.poster_path) myPath = movie.poster_path;\n            else if (movie.backdrop_path) myPath = movie.backdrop_path;\n            else return <p> NO IMAGE! sorry :(</p>;\n            return (\n              <div key={movie.id} style={{ display: \"flex\" }}>\n                <Movie\n                  title={movie.title}\n                  image={imgUrl + myPath}\n                  description={movie.overview}\n                  name={movie.title}\n                  rating={movie.vote_average}\n                />\n              </div>\n            );\n          })}\n        </div>\n      );\n      // console.log(movies);\n    } else {\n      inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n    }\n\n    return (\n      <div className={classes.Movies}>\n        {/* <Button name={\"Show Movies\"} myFunction={this.presentMovies} /> */}\n        {/* <input type=\"text\" onChange={this.searchContent.bind(this)} /> */}\n\n        <Searchbar onChange={this.searchContent.bind(this)}></Searchbar>\n        {movies}\n        {inputEnablerMsg}\n      </div>\n    );\n  }\n}\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}