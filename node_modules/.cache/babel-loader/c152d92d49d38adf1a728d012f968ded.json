{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nimport useFetch from \"./useFetch\";\n\nconst GeneralMovies = props => {\n  //   const [stateIds, setStateIds] = useState([]);\n  //   const [stateMovies, setStateMovies] = useState([]);\n  //   const [inputEntered, setInputEntered] = useState(true);\n  //   genMovies = [...];\n  //   Promise.all(genMovies[0]);\n  //   console.log(genMovies[0]);\n  //   let inputEntered = useFetch(props, searchInput)[1];\n  let inputEntered = false; //   useEffect(() => console.log(stateIds), [stateIds]);\n  //   useEffect(() => {\n  //     fetchingTheMovies();\n  //   }, []);\n  //   const searchMovie = (event) => {\n  //     let searchInput = event.target.value;\n  //     fetchingTheMovies(searchInput);\n  //   };\n  //   const useFetch = async (searchInput) => {\n  // const fetchingTheMovies = async (searchInput) => {\n  // let movieUrl = \"\";\n  // let myMovies = [];\n  // let id_info = [];\n  // let urlString = \"\";\n  // if (searchInput !== \"\") {\n  //   urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n  //   await fetch(urlString) // need to give urlString\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       for (const [i, result] of json.results.entries()) {\n  //         id_info[i] = result.id;\n  //       }\n  //     })\n  //     .catch((error) => console.log(error));\n  //   setStateIds(id_info);\n  //   for (const [i, id] of stateIds.entries()) {\n  //     movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n  //     myMovies[i] = await fetch(movieUrl)\n  //       .then((res) => res.json())\n  //       .then((json) => {\n  //         return json;\n  //       });\n  //   }\n  //   setStateMovies((prev) => [...prev, ...myMovies]);\n  //   console.log(myMovies);\n  //   setInputEntered(true);\n  // } else setInputEntered(false);\n  // };\n  //   };\n  //   console.log(inputEntered + \"movies\" + genMovies);\n\n  let searchInput = \"jesus\"; //   let genMovies = null;\n\n  let inputEnablerMsg = null;\n  let searchBar = null; //   Promise.resolve(useFetch(props, searchInput));\n\n  let movies = null;\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let myPath = \"\";\n  const data = useFetch(props, searchInput);\n  console.log(data);\n  Promise.all(data[0]).then(value => console.log(value)); //   data.then((genMovies) => {\n  // console.log(value);\n  // console.log(\"value: \" + value[1].id);\n  //     genMovies = value;\n  // console.log(genMovies);\n  // setMovies(genMovies);\n  //   });\n  // const starterFunc = () => {\n  // if(this.state.)\n  //   if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchMovie} />;\n  //   });\n\n  inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, \"Please! enter a search input above! :)\");\n\n  const setMovies = genMovies => {\n    console.log(genMovies);\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, genMovies.map((movie, index) => {\n      if (movie.poster_path) {\n        myPath = movie.poster_path;\n        console.log(movie);\n      } else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n\n      return (\n        /*#__PURE__*/\n        // <div style={{ display: \"flex\" }}>\n        React.createElement(Movie, {\n          key: movie.id,\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }\n        }) // </div>\n\n      );\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, searchBar, inputEnablerMsg, movies);\n};\n\nexport default GeneralMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js"],"names":["React","useEffect","useState","Movie","SearchBar","useFetch","GeneralMovies","props","inputEntered","searchInput","inputEnablerMsg","searchBar","movies","imgUrl","myPath","data","console","log","Promise","all","then","value","setMovies","genMovies","map","movie","index","poster_path","backdrop_path","id","title","overview","vote_average"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,MAAIC,YAAY,GAAG,KAAnB,CAT+B,CAW/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,WAAW,GAAG,OAAlB,CAnD+B,CAoD/B;;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,SAAS,GAAG,IAAhB,CAtD+B,CAuD/B;;AACA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,MAAM,GAAG,kCAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,IAAI,GAAGV,QAAQ,CAACE,KAAD,EAAQE,WAAR,CAArB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAAC,CAAD,CAAhB,EAAqBK,IAArB,CAA2BC,KAAD,IAAWL,OAAO,CAACC,GAAR,CAAYI,KAAZ,CAArC,EA7D+B,CA8D/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAX,EAAAA,eAAe,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAlB;;AACA,QAAMY,SAAS,GAAIC,SAAD,IAAe;AAC/BP,IAAAA,OAAO,CAACC,GAAR,CAAYM,SAAZ;AACAX,IAAAA,MAAM,gBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGW,SAAS,CAACC,GAAV,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/B,UAAID,KAAK,CAACE,WAAV,EAAuB;AACrBb,QAAAA,MAAM,GAAGW,KAAK,CAACE,WAAf;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,OAHD,MAGO,IAAIA,KAAK,CAACG,aAAV,EAAyBd,MAAM,GAAGW,KAAK,CAACG,aAAf,CAAzB,KACF,oBAAO;AAAG,QAAA,GAAG,EAAEF,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;;AACL;AAAA;AACE;AACA,4BAAC,KAAD;AACE,UAAA,GAAG,EAAED,KAAK,CAACI,EADb;AAEE,UAAA,KAAK,EAAEJ,KAAK,CAACK,KAFf;AAGE,UAAA,KAAK,EAAEjB,MAAM,GAAGC,MAHlB;AAIE,UAAA,WAAW,EAAEW,KAAK,CAACM,QAJrB;AAKE,UAAA,IAAI,EAAEN,KAAK,CAACK,KALd;AAME,UAAA,MAAM,EAAEL,KAAK,CAACO,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAUE;;AAVF;AAYD,KAlBA,CADH,CADF;AAuBD,GAzBD;;AA0BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,SADH,EAEGD,eAFH,EAGGE,MAHH,CADF;AAOD,CA3GD;;AA6GA,eAAeN,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nimport useFetch from \"./useFetch\";\nconst GeneralMovies = (props) => {\n  //   const [stateIds, setStateIds] = useState([]);\n  //   const [stateMovies, setStateMovies] = useState([]);\n  //   const [inputEntered, setInputEntered] = useState(true);\n\n  //   genMovies = [...];\n  //   Promise.all(genMovies[0]);\n  //   console.log(genMovies[0]);\n  //   let inputEntered = useFetch(props, searchInput)[1];\n  let inputEntered = false;\n\n  //   useEffect(() => console.log(stateIds), [stateIds]);\n  //   useEffect(() => {\n  //     fetchingTheMovies();\n  //   }, []);\n  //   const searchMovie = (event) => {\n  //     let searchInput = event.target.value;\n  //     fetchingTheMovies(searchInput);\n  //   };\n  //   const useFetch = async (searchInput) => {\n  // const fetchingTheMovies = async (searchInput) => {\n  // let movieUrl = \"\";\n  // let myMovies = [];\n  // let id_info = [];\n  // let urlString = \"\";\n  // if (searchInput !== \"\") {\n  //   urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n  //   await fetch(urlString) // need to give urlString\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       for (const [i, result] of json.results.entries()) {\n  //         id_info[i] = result.id;\n  //       }\n  //     })\n  //     .catch((error) => console.log(error));\n  //   setStateIds(id_info);\n  //   for (const [i, id] of stateIds.entries()) {\n  //     movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n  //     myMovies[i] = await fetch(movieUrl)\n  //       .then((res) => res.json())\n  //       .then((json) => {\n  //         return json;\n  //       });\n  //   }\n  //   setStateMovies((prev) => [...prev, ...myMovies]);\n  //   console.log(myMovies);\n  //   setInputEntered(true);\n  // } else setInputEntered(false);\n  // };\n  //   };\n  //   console.log(inputEntered + \"movies\" + genMovies);\n  let searchInput = \"jesus\";\n  //   let genMovies = null;\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  //   Promise.resolve(useFetch(props, searchInput));\n  let movies = null;\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let myPath = \"\";\n  const data = useFetch(props, searchInput);\n  console.log(data);\n  Promise.all(data[0]).then((value) => console.log(value));\n  //   data.then((genMovies) => {\n  // console.log(value);\n  // console.log(\"value: \" + value[1].id);\n  //     genMovies = value;\n  // console.log(genMovies);\n  // setMovies(genMovies);\n  //   });\n  // const starterFunc = () => {\n  // if(this.state.)\n  //   if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchMovie} />;\n  //   });\n  inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  const setMovies = (genMovies) => {\n    console.log(genMovies);\n    movies = (\n      <div>\n        {genMovies.map((movie, index) => {\n          if (movie.poster_path) {\n            myPath = movie.poster_path;\n            console.log(movie);\n          } else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            // <div style={{ display: \"flex\" }}>\n            <Movie\n              key={movie.id}\n              title={movie.title}\n              image={imgUrl + myPath}\n              description={movie.overview}\n              name={movie.title}\n              rating={movie.vote_average}\n            />\n            // </div>\n          );\n        })}\n      </div>\n    );\n  };\n  return (\n    <div>\n      {searchBar}\n      {inputEnablerMsg}\n      {movies}\n    </div>\n  );\n};\n\nexport default GeneralMovies;\n"]},"metadata":{},"sourceType":"module"}