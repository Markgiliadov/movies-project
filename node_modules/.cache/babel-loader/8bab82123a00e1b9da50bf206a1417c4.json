{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\n\nconst useFetch = (props, searchInput) => {\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true); //   let searchInput = props.searchInput;\n\n  console.log(searchInput);\n  useEffect(() => {\n    fetchingTheMovies();\n  }, []);\n\n  const fetchingTheMovies = async searchInput => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n\n    if (searchInput !== \"\") {\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(\"url \" + urlString + \"inp is: \" + props.searchInput);\n      await fetch(urlString) // need to give urlString\n      .then(res => res.json()).then(json => {\n        for (const [i, result] of json.results.entries()) {\n          id_info[i] = result.id;\n        }\n      }).catch(error => console.log(error));\n      setStateIds(id_info);\n\n      for (const [i, id] of stateIds.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        myMovies[i] = await fetch(movieUrl).then(res => res.json()).then(json => {\n          return json;\n        });\n      }\n\n      setStateMovies(prev => [...prev, ...myMovies]);\n      console.log(myMovies);\n      setInputEntered(true);\n    } else setInputEntered(false);\n  };\n\n  console.log(stateMovies);\n  return [stateMovies, inputEntered];\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/useFetch.js"],"names":["React","useState","useEffect","useFetch","props","searchInput","stateIds","setStateIds","stateMovies","setStateMovies","inputEntered","setInputEntered","console","log","fetchingTheMovies","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","i","result","results","entries","id","catch","error","baseMovieUrl","API_KEY_MOVIE","prev"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AACvC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD,CAHuC,CAIvC;;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ;AACAH,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMA,iBAAiB,GAAG,MAAOT,WAAP,IAAuB;AAC/C,QAAIU,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIb,WAAW,KAAK,EAApB,EAAwB;AACtBa,MAAAA,SAAS,GAAGd,KAAK,CAACe,aAAN,CAAoBC,MAApB,CAA2Bf,WAA3B,EAAwCD,KAAK,CAACiB,cAA9C,CAAZ;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASK,SAAT,GAAqB,UAArB,GAAkCd,KAAK,CAACC,WAApD;AACA,YAAMiB,KAAK,CAACJ,SAAD,CAAL,CAAiB;AAAjB,OACHK,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGE,IAAD,IAAU;AACd,aAAK,MAAM,CAACC,CAAD,EAAIC,MAAJ,CAAX,IAA0BF,IAAI,CAACG,OAAL,CAAaC,OAAb,EAA1B,EAAkD;AAChDZ,UAAAA,OAAO,CAACS,CAAD,CAAP,GAAaC,MAAM,CAACG,EAApB;AACD;AACF,OANG,EAOHC,KAPG,CAOIC,KAAD,IAAWpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ,CAPd,CAAN;AAQAzB,MAAAA,WAAW,CAACU,OAAD,CAAX;;AACA,WAAK,MAAM,CAACS,CAAD,EAAII,EAAJ,CAAX,IAAsBxB,QAAQ,CAACuB,OAAT,EAAtB,EAA0C;AACxCd,QAAAA,QAAQ,GAAGX,KAAK,CAAC6B,YAAN,GAAqBH,EAArB,GAA0B1B,KAAK,CAAC8B,aAA3C;AACAlB,QAAAA,QAAQ,CAACU,CAAD,CAAR,GAAc,MAAMJ,KAAK,CAACP,QAAD,CAAL,CACjBQ,IADiB,CACXC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADG,EAEjBF,IAFiB,CAEXE,IAAD,IAAU;AACd,iBAAOA,IAAP;AACD,SAJiB,CAApB;AAKD;;AACDhB,MAAAA,cAAc,CAAE0B,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAU,GAAGnB,QAAb,CAAX,CAAd;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACAL,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAvBD,MAuBOA,eAAe,CAAC,KAAD,CAAf;AACR,GA7BD;;AA8BAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACA,SAAO,CAACA,WAAD,EAAcE,YAAd,CAAP;AACD,CAzCD;;AA2CA,eAAeP,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst useFetch = (props, searchInput) => {\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  //   let searchInput = props.searchInput;\n  console.log(searchInput);\n  useEffect(() => {\n    fetchingTheMovies();\n  }, []);\n  const fetchingTheMovies = async (searchInput) => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n    if (searchInput !== \"\") {\n      urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n      console.log(\"url \" + urlString + \"inp is: \" + props.searchInput);\n      await fetch(urlString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          for (const [i, result] of json.results.entries()) {\n            id_info[i] = result.id;\n          }\n        })\n        .catch((error) => console.log(error));\n      setStateIds(id_info);\n      for (const [i, id] of stateIds.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        myMovies[i] = await fetch(movieUrl)\n          .then((res) => res.json())\n          .then((json) => {\n            return json;\n          });\n      }\n      setStateMovies((prev) => [...prev, ...myMovies]);\n      console.log(myMovies);\n      setInputEntered(true);\n    } else setInputEntered(false);\n  };\n  console.log(stateMovies);\n  return [stateMovies, inputEntered];\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}