{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState, Component } from \"react\"; // import Auxil from \"../../../hoc/Auxil/Auxil\";\n\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = props => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [stateIds, setStateIds] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false); // let [stateMovies, setStateMovies] = useState([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n  // useEffect(() => {}, [stateMovies]);\n\n  searchContent = event => {\n    let searchInput = event.target.value;\n    this.fetchedMovies(\"captain\");\n  };\n\n  fetchedMovies = async searchInput => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = []; // let finalMovies = [];\n\n    let urlString = \"\"; // let searchInput = props.searchBar.props.onChange();\n\n    if (searchInput !== \"\") urlString = this.props.baseSearchUrl.concat(searchInput, this.props.API_KEY_SEARCH); //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      console.log(json);\n      id_info = json.results.map(result => {\n        return result.id; // returning id's of movies\n      });\n    }).catch(error => console.log(error));\n    this.setState({\n      stateIds: id_info\n    }); // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n\n    this.state.stateIds.map(async (id, index) => {\n      movieUrl = this.props.baseMovieUrl + id + this.props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n\n      myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        return json; // returning movie at an index location\n      }); // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n      // setStateMovies((myMovies) => {\n      //   return { myMovies };\n      // });\n\n      this.setState({\n        stateMovies: myMovies\n      }); // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      // console.log(stateMovies);\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    }); // return finalMovies;\n    // console.log(stmovies);\n    // });\n\n    this.setState({\n      inputEntered: true\n    }); // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // if(this.state.)\n\n  if (this.props.baseSearchUrl) searchBar = /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: this.searchContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  });\n\n  if (this.state.inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, this.state.stateMovies.map((movie, index) => {\n      if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n      return (\n        /*#__PURE__*/\n        // <div style={{ display: \"flex\" }}>\n        React.createElement(Movie // key={movie.id}\n        , {\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }\n        }) // {console.log(movie.title)}\n        // </div>\n\n      );\n    }));\n    console.log(movies);\n  } else {\n    inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 23\n      }\n    }, \"Please! enter a search input above! :)\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, this.props.children, searchBar, movies, inputEnablerMsg);\n};\n\nexport default GenericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Component","Movie","SearchBar","GenericMovies","props","stateMovies","setStateMovies","stateIds","setStateIds","inputEntered","setInputEntered","searchContent","event","searchInput","target","value","fetchedMovies","console","log","movieUrl","myMovies","id_info","urlString","baseSearchUrl","concat","API_KEY_SEARCH","fetch","then","res","json","results","map","result","id","catch","error","setState","state","index","baseMovieUrl","API_KEY_MOVIE","imgUrl","movies","myPath","inputEnablerMsg","searchBar","movie","poster_path","backdrop_path","title","overview","vote_average","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\n// import Auxil from \"../../../hoc/Auxil/Auxil\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nconst GenericMovies = (props) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  const [stateIds, setStateIds] = useState([]);\n  const [inputEntered, setInputEntered] = useState(false);\n\n  // let [stateMovies, setStateMovies] = useState([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n  // useEffect(() => {}, [stateMovies]);\n  searchContent = (event) => {\n    let searchInput = event.target.value;\n    this.fetchedMovies(\"captain\");\n  };\n  fetchedMovies = async (searchInput) => {\n    console.log(searchInput);\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    // let finalMovies = [];\n    let urlString = \"\";\n    // let searchInput = props.searchBar.props.onChange();\n    if (searchInput !== \"\")\n      urlString = this.props.baseSearchUrl.concat(\n        searchInput,\n        this.props.API_KEY_SEARCH\n      );\n\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        id_info = json.results.map((result) => {\n          return result.id; // returning id's of movies\n        });\n      })\n      .catch((error) => console.log(error));\n    this.setState({ stateIds: id_info });\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    this.state.stateIds.map(async (id, index) => {\n      movieUrl = this.props.baseMovieUrl + id + this.props.API_KEY_MOVIE; // creating a movie from the id given\n      // console.log(movieUrl);\n      myMovies[index] = await fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n\n          return json; // returning movie at an index location\n        });\n      // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n      // setStateMovies((myMovies) => {\n      //   return { myMovies };\n      // });\n      this.setState({ stateMovies: myMovies });\n      // setStateMovies((prevStateMovies) => {\n      //   return { ...prevStateMovies, ...myMovies };\n      // });\n      // console.log(stateMovies);\n\n      // setState((prevState) => {\n      //   // Object.assign would also work\n      //   return { ...prevState, ...updatedValues };\n      // });\n      // console.log(myMovies[index]);\n      // finalMovies = myMovies;\n      // console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n    });\n\n    // return finalMovies;\n\n    // console.log(stmovies);\n    // });\n    this.setState({ inputEntered: true });\n    // this.setState({ inputEntered: true });\n  };\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // if(this.state.)\n  if (this.props.baseSearchUrl)\n    searchBar = <SearchBar onChange={this.searchContent} />;\n\n  if (this.state.inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n\n    movies = (\n      <div>\n        {this.state.stateMovies.map((movie, index) => {\n          if (movie.poster_path) myPath = movie.poster_path;\n          else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            // <div style={{ display: \"flex\" }}>\n            <Movie\n              // key={movie.id}\n              title={movie.title}\n              image={imgUrl + myPath}\n              description={movie.overview}\n              name={movie.title}\n              rating={movie.vote_average}\n            />\n            // {console.log(movie.title)}\n            // </div>\n          );\n        })}\n      </div>\n    );\n    console.log(movies);\n  } else {\n    inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  }\n\n  return (\n    <div>\n      {/* {props.searchBar} */}\n      {this.props.children}\n      {/* <SearchBar onChange={searchContent} /> */}\n      {searchBar}\n      {movies}\n\n      {inputEnablerMsg}\n    </div>\n  );\n};\nexport default GenericMovies;\n"]},"metadata":{},"sourceType":"module"}