{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect } from \"react\";\nimport Auxil from \"../../../hoc/Auxil/Auxil\";\n\nconst genericMovies = props => {\n  // useEffect(console.log(fetchedMovies));\n  const fetchedMovies = async () => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    let urlString = \"\"; // if (searchInput !== \"\") {\n    // urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n    .then(res => res.json()).then(json => {\n      console.log(json);\n      id_info = json.results.map(result => {\n        return result.id; // returning id's of movies\n      });\n    }).catch(error => console.log(error)); // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n\n    id_info.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n\n      myMovies[index] = await fetch(movieUrl).then(res => res.json()).then(json => {\n        // console.log(json);\n        return json; // returning movie at an index location\n      }); // finalMovies = myMovies;\n\n      console.log(finalMovies); // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n\n      this.setState({\n        movies: myMovies\n      });\n    });\n    console.log(myMovies); // return finalMovies;\n\n    console.log(this.state.movies); // });\n\n    this.setState({\n      inputEntered: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Auxil, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nexport default genericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","Auxil","genericMovies","props","fetchedMovies","movieUrl","myMovies","id_info","finalMovies","urlString","fetch","then","res","json","console","log","results","map","result","id","catch","error","index","baseMovieUrl","API_KEY_MOVIE","setState","movies","state","inputEntered","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,SAAS,GAAG,EAAhB,CALgC,CAOhC;AACA;AAEA;AACA;AACA;;AAEA,UAAMC,KAAK,CAACD,SAAD,CAAL,CAAiB;AAAjB,KACHE,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGE,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAN,MAAAA,OAAO,GAAGM,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,MAAD,IAAY;AACrC,eAAOA,MAAM,CAACC,EAAd,CADqC,CACnB;AACnB,OAFS,CAAV;AAGD,KAPG,EAQHC,KARG,CAQIC,KAAD,IAAWP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CARd,CAAN,CAdgC,CAuBhC;AACA;AACA;AACA;;AACAd,IAAAA,OAAO,CAACU,GAAR,CAAY,OAAOE,EAAP,EAAWG,KAAX,KAAqB;AAC/BjB,MAAAA,QAAQ,GAAGF,KAAK,CAACoB,YAAN,GAAqBJ,EAArB,GAA0BhB,KAAK,CAACqB,aAA3C,CAD+B,CAC2B;;AAC1DlB,MAAAA,QAAQ,CAACgB,KAAD,CAAR,GAAkB,MAAMZ,KAAK,CAACL,QAAD,CAAL,CACrBM,IADqB,CACfC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADO,EAErBF,IAFqB,CAEfE,IAAD,IAAU;AACd;AACA,eAAOA,IAAP,CAFc,CAED;AACd,OALqB,CAAxB,CAF+B,CAQ/B;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ,EAT+B,CAU/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKiB,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAEpB;AADI,OAAd;AAGD,KApBD;AAqBAQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAhDgC,CAiDhC;;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWD,MAAvB,EAnDgC,CAoDhC;;AACA,SAAKD,QAAL,CAAc;AAAEG,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACD,GAtDD;;AAwDA,sBAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQzB,KAAK,CAAC0B,QAAd,CAAP;AACD,CA3DD;;AA4DA,eAAe3B,aAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport Auxil from \"../../../hoc/Auxil/Auxil\";\nconst genericMovies = (props) => {\n  // useEffect(console.log(fetchedMovies));\n  const fetchedMovies = async () => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let finalMovies = [];\n    let urlString = \"\";\n\n    // if (searchInput !== \"\") {\n    // urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n    //   else if(){\n    // }\n    // else if(){}\n\n    await fetch(urlString) // need to give urlString\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        id_info = json.results.map((result) => {\n          return result.id; // returning id's of movies\n        });\n      })\n      .catch((error) => console.log(error));\n    // console.log(id_info);\n    //   this.setState({\n    //     movies_ids: id_info, // setting an array of id's\n    //   });\n    id_info.map(async (id, index) => {\n      movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n      myMovies[index] = await fetch(movieUrl)\n        .then((res) => res.json())\n        .then((json) => {\n          // console.log(json);\n          return json; // returning movie at an index location\n        });\n      // finalMovies = myMovies;\n      console.log(finalMovies);\n      // .catch((error) => {\n      //   console.log(error);\n      // })\n      // this.setState({\n      //   movies: myMovies,\n      // });\n      // console.log(this.state.movies);\n      this.setState({\n        movies: myMovies,\n      });\n    });\n    console.log(myMovies);\n    // return finalMovies;\n\n    console.log(this.state.movies);\n    // });\n    this.setState({ inputEntered: true });\n  };\n\n  return <Auxil>{props.children}</Auxil>;\n};\nexport default genericMovies;\n"]},"metadata":{},"sourceType":"module"}