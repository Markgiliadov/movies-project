{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useFetch = async (props, searchInput) => {\n  const [stateMovies, setStateMovies] = useState([]); //   let myInput = searchInput;\n  //   console.log(myInput);\n\n  useEffect(() => {\n    // async function fetch() {\n    //   await FetchingTheMovies(searchInput);\n    // }\n    // fetch();\n    // FetchingTheMovies(searchInput);\n    // return setStateMovies([]);\n    // const FetchingTheMovies = async (searchInput) => {\n    async function fetch() {\n      let movieUrl = \"\";\n      let myMovies = [];\n      let id_info = [];\n      let urlString = \"\";\n      let baseUrl = \"\";\n      let midUrl = \"\";\n      let endUrl = \"\";\n\n      if (searchInput !== \"\" || !props.isSearched) {\n        console.log(props.baseSearchUrl);\n\n        if (props.baseSearchUrl) {\n          baseUrl = props.baseSearchUrl;\n          midUrl = searchInput;\n          endUrl = props.API_KEY_SEARCH;\n        } else {\n          baseUrl = props.baseNotSearchedUrl;\n          endUrl = props.API_KEY_MOVIE;\n        }\n\n        console.log(baseUrl);\n        urlString = baseUrl.concat(midUrl, endUrl);\n        console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n        await fetch(urlString) // need to give urlString\n        .then(res => res.json()).then(json => {\n          console.log(json.results);\n\n          for (const [i, result] of json.results.entries()) {\n            id_info[i] = result.id;\n          }\n        }).catch(error => console.log(error));\n        console.log(\"i am here\" + id_info);\n\n        for (const [i, id] of id_info.entries()) {\n          movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // console.log(movieUrl);\n\n          myMovies[i] = await fetch(movieUrl).then(async res => await res.json()).then(json => json);\n        }\n\n        setStateMovies(() => myMovies);\n        console.log(stateMovies);\n      } // };\n\n\n      console.log(stateMovies);\n      return stateMovies; // };\n    }\n\n    fetch();\n  }, [searchInput]);\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/useFetch.js"],"names":["useState","useEffect","useFetch","props","searchInput","stateMovies","setStateMovies","fetch","movieUrl","myMovies","id_info","urlString","baseUrl","midUrl","endUrl","isSearched","console","log","baseSearchUrl","API_KEY_SEARCH","baseNotSearchedUrl","API_KEY_MOVIE","concat","then","res","json","results","i","result","entries","id","catch","error","baseMovieUrl"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = async (props, searchInput) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  //   let myInput = searchInput;\n  //   console.log(myInput);\n  useEffect(() => {\n    // async function fetch() {\n    //   await FetchingTheMovies(searchInput);\n    // }\n    // fetch();\n    // FetchingTheMovies(searchInput);\n    // return setStateMovies([]);\n    // const FetchingTheMovies = async (searchInput) => {\n    async function fetch() {\n      let movieUrl = \"\";\n      let myMovies = [];\n      let id_info = [];\n      let urlString = \"\";\n      let baseUrl = \"\";\n      let midUrl = \"\";\n      let endUrl = \"\";\n      if (searchInput !== \"\" || !props.isSearched) {\n        console.log(props.baseSearchUrl);\n        if (props.baseSearchUrl) {\n          baseUrl = props.baseSearchUrl;\n          midUrl = searchInput;\n          endUrl = props.API_KEY_SEARCH;\n        } else {\n          baseUrl = props.baseNotSearchedUrl;\n\n          endUrl = props.API_KEY_MOVIE;\n        }\n        console.log(baseUrl);\n        urlString = baseUrl.concat(midUrl, endUrl);\n        console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n        await fetch(urlString) // need to give urlString\n          .then((res) => res.json())\n          .then((json) => {\n            console.log(json.results);\n            for (const [i, result] of json.results.entries()) {\n              id_info[i] = result.id;\n            }\n          })\n          .catch((error) => console.log(error));\n        console.log(\"i am here\" + id_info);\n        for (const [i, id] of id_info.entries()) {\n          movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n          // console.log(movieUrl);\n          myMovies[i] = await fetch(movieUrl)\n            .then(async (res) => await res.json())\n            .then((json) => json);\n        }\n        setStateMovies(() => myMovies);\n        console.log(stateMovies);\n      }\n      // };\n      console.log(stateMovies);\n      return stateMovies;\n      // };\n    }\n    fetch();\n  }, [searchInput]);\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}