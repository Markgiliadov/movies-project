{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useFetch = async (props, searchInput) => {\n  const [stateMovies, setStateMovies] = useState([]); //   let myInput = searchInput;\n  //   console.log(myInput);\n\n  useEffect(() => {\n    // async function fetch() {\n    //   await FetchingTheMovies(searchInput);\n    // }\n    // fetch();\n    FetchingTheMovies(searchInput); // return setStateMovies([]);\n  }, [searchInput]);\n\n  const FetchingTheMovies = async searchInput => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n    let baseUrl = \"\";\n    let midUrl = \"\";\n    let endUrl = \"\";\n\n    if (searchInput !== \"\" || !props.isSearched) {\n      console.log(props.baseSearchUrl);\n\n      if (props.baseSearchUrl) {\n        baseUrl = props.baseSearchUrl;\n        midUrl = searchInput;\n        endUrl = props.API_KEY_SEARCH;\n      } else {\n        baseUrl = props.baseNotSearchedUrl;\n        endUrl = props.API_KEY_MOVIE;\n      }\n\n      console.log(baseUrl);\n      urlString = baseUrl.concat(midUrl, endUrl);\n      console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n      await fetch(urlString) // need to give urlString\n      .then(res => res.json()).then(json => {\n        console.log(json.results);\n\n        for (const [i, result] of json.results.entries()) {\n          id_info[i] = result.id;\n        }\n      }).catch(error => console.log(error));\n      console.log(\"i am here\" + id_info);\n\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        console.log(movieUrl);\n        myMovies[i] = await fetch(movieUrl).then(async res => await res.json()).then(json => json);\n      }\n\n      setStateMovies([...myMovies]);\n    }\n  };\n\n  console.log(stateMovies);\n  return stateMovies;\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/useFetch.js"],"names":["useState","useEffect","useFetch","props","searchInput","stateMovies","setStateMovies","FetchingTheMovies","movieUrl","myMovies","id_info","urlString","baseUrl","midUrl","endUrl","isSearched","console","log","baseSearchUrl","API_KEY_SEARCH","baseNotSearchedUrl","API_KEY_MOVIE","concat","fetch","then","res","json","results","i","result","entries","id","catch","error","baseMovieUrl"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = async (props, searchInput) => {\n  const [stateMovies, setStateMovies] = useState([]);\n  //   let myInput = searchInput;\n  //   console.log(myInput);\n  useEffect(() => {\n    // async function fetch() {\n    //   await FetchingTheMovies(searchInput);\n    // }\n    // fetch();\n    FetchingTheMovies(searchInput);\n    // return setStateMovies([]);\n  }, [searchInput]);\n  const FetchingTheMovies = async (searchInput) => {\n    let movieUrl = \"\";\n    let myMovies = [];\n    let id_info = [];\n    let urlString = \"\";\n    let baseUrl = \"\";\n    let midUrl = \"\";\n    let endUrl = \"\";\n    if (searchInput !== \"\" || !props.isSearched) {\n      console.log(props.baseSearchUrl);\n      if (props.baseSearchUrl) {\n        baseUrl = props.baseSearchUrl;\n        midUrl = searchInput;\n        endUrl = props.API_KEY_SEARCH;\n      } else {\n        baseUrl = props.baseNotSearchedUrl;\n\n        endUrl = props.API_KEY_MOVIE;\n      }\n      console.log(baseUrl);\n      urlString = baseUrl.concat(midUrl, endUrl);\n      console.log(\"url \" + urlString + \"inp is: \" + searchInput);\n      await fetch(urlString) // need to give urlString\n        .then((res) => res.json())\n        .then((json) => {\n          console.log(json.results);\n          for (const [i, result] of json.results.entries()) {\n            id_info[i] = result.id;\n          }\n        })\n        .catch((error) => console.log(error));\n      console.log(\"i am here\" + id_info);\n      for (const [i, id] of id_info.entries()) {\n        movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n        console.log(movieUrl);\n        myMovies[i] = await fetch(movieUrl)\n          .then(async (res) => await res.json())\n          .then((json) => json);\n      }\n      setStateMovies([...myMovies]);\n    }\n  };\n  console.log(stateMovies);\n  return stateMovies;\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}