{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nimport useFetch from \"./useFetch\";\n\nconst GeneralMovies = props => {\n  //   const [stateIds, setStateIds] = useState([]);\n  //   const [stateMovies, setStateMovies] = useState([]);\n  //   const [inputEntered, setInputEntered] = useState(true);\n  //   genMovies = [...];\n  //   Promise.all(genMovies[0]);\n  //   console.log(genMovies[0]);\n  //   let inputEntered = useFetch(props, searchInput)[1];\n  const inputEntered = true; //   useEffect(() => console.log(stateIds), [stateIds]);\n  //   useEffect(() => {\n  //     fetchingTheMovies();\n  //   }, []);\n  //   const searchMovie = (event) => {\n  //     let searchInput = event.target.value;\n  //     fetchingTheMovies(searchInput);\n  //   };\n  //   const useFetch = async (searchInput) => {\n  // const fetchingTheMovies = async (searchInput) => {\n  // let movieUrl = \"\";\n  // let myMovies = [];\n  // let id_info = [];\n  // let urlString = \"\";\n  // if (searchInput !== \"\") {\n  //   urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n  //   await fetch(urlString) // need to give urlString\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       for (const [i, result] of json.results.entries()) {\n  //         id_info[i] = result.id;\n  //       }\n  //     })\n  //     .catch((error) => console.log(error));\n  //   setStateIds(id_info);\n  //   for (const [i, id] of stateIds.entries()) {\n  //     movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n  //     myMovies[i] = await fetch(movieUrl)\n  //       .then((res) => res.json())\n  //       .then((json) => {\n  //         return json;\n  //       });\n  //   }\n  //   setStateMovies((prev) => [...prev, ...myMovies]);\n  //   console.log(myMovies);\n  //   setInputEntered(true);\n  // } else setInputEntered(false);\n  // };\n  //   };\n  //   console.log(inputEntered + \"movies\" + genMovies);\n\n  let searchInput = \"jesus\";\n  let genMovies = null;\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; //   Promise.resolve(useFetch(props, searchInput));\n\n  let ccc = useFetch(props, searchInput);\n  ccc.then(function (value) {\n    // console.log(value);\n    // console.log(\"value: \" + value[1].id);\n    genMovies = value;\n  }); // const starterFunc = () => {\n  // if(this.state.)\n  //   if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchMovie} />;\n  //   if (inputEntered) {\n  //     console.log(genMovies);\n  //     movies = (\n  //       <div>\n  //         {genMovies.map((movie, index) => {\n  //           if (movie.poster_path) myPath = movie.poster_path;\n  //           else if (movie.backdrop_path) myPath = movie.backdrop_path;\n  //           else return <p key={index}> NO IMAGE! sorry :(</p>;\n  //           return (\n  //             // <div style={{ display: \"flex\" }}>\n  //             <Movie\n  //               key={movie.id}\n  //               title={movie.title}\n  //               image={imgUrl + myPath}\n  //               description={movie.overview}\n  //               name={movie.title}\n  //               rating={movie.vote_average}\n  //             />\n  // {console.log(movie.title)}\n  // </div>\n  //       );\n  //     })}\n  //   </div>\n  // );\n  //     console.log(movies);\n  //   } else {\n  //     inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  //   }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, searchBar, inputEnablerMsg, movies);\n};\n\nexport default GeneralMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GeneralMovies.js"],"names":["React","useEffect","useState","Movie","SearchBar","useFetch","GeneralMovies","props","inputEntered","searchInput","genMovies","imgUrl","movies","myPath","inputEnablerMsg","searchBar","ccc","then","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,QAAMC,YAAY,GAAG,IAArB,CAT+B,CAW/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,WAAW,GAAG,OAAlB;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,MAAM,GAAG,kCAAb;AACA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,SAAS,GAAG,IAAhB,CAzD+B,CA0D/B;;AACA,MAAIC,GAAG,GAAGX,QAAQ,CAACE,KAAD,EAAQE,WAAR,CAAlB;AACAO,EAAAA,GAAG,CAACC,IAAJ,CAAS,UAAUC,KAAV,EAAiB;AACxB;AACA;AACAR,IAAAA,SAAS,GAAGQ,KAAZ;AACD,GAJD,EA5D+B,CAiE/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,SADH,EAEGD,eAFH,EAGGF,MAHH,CADF;AAOD,CAzGD;;AA2GA,eAAeN,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Movie from \"../../../components/Movie/Movie\";\nimport SearchBar from \"../../../components/Searchbar/Searchbar\";\nimport useFetch from \"./useFetch\";\nconst GeneralMovies = (props) => {\n  //   const [stateIds, setStateIds] = useState([]);\n  //   const [stateMovies, setStateMovies] = useState([]);\n  //   const [inputEntered, setInputEntered] = useState(true);\n\n  //   genMovies = [...];\n  //   Promise.all(genMovies[0]);\n  //   console.log(genMovies[0]);\n  //   let inputEntered = useFetch(props, searchInput)[1];\n  const inputEntered = true;\n\n  //   useEffect(() => console.log(stateIds), [stateIds]);\n  //   useEffect(() => {\n  //     fetchingTheMovies();\n  //   }, []);\n  //   const searchMovie = (event) => {\n  //     let searchInput = event.target.value;\n  //     fetchingTheMovies(searchInput);\n  //   };\n  //   const useFetch = async (searchInput) => {\n  // const fetchingTheMovies = async (searchInput) => {\n  // let movieUrl = \"\";\n  // let myMovies = [];\n  // let id_info = [];\n  // let urlString = \"\";\n  // if (searchInput !== \"\") {\n  //   urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n  //   await fetch(urlString) // need to give urlString\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       for (const [i, result] of json.results.entries()) {\n  //         id_info[i] = result.id;\n  //       }\n  //     })\n  //     .catch((error) => console.log(error));\n  //   setStateIds(id_info);\n  //   for (const [i, id] of stateIds.entries()) {\n  //     movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n  //     myMovies[i] = await fetch(movieUrl)\n  //       .then((res) => res.json())\n  //       .then((json) => {\n  //         return json;\n  //       });\n  //   }\n  //   setStateMovies((prev) => [...prev, ...myMovies]);\n  //   console.log(myMovies);\n  //   setInputEntered(true);\n  // } else setInputEntered(false);\n  // };\n  //   };\n  //   console.log(inputEntered + \"movies\" + genMovies);\n  let searchInput = \"jesus\";\n  let genMovies = null;\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  //   Promise.resolve(useFetch(props, searchInput));\n  let ccc = useFetch(props, searchInput);\n  ccc.then(function (value) {\n    // console.log(value);\n    // console.log(\"value: \" + value[1].id);\n    genMovies = value;\n  });\n  // const starterFunc = () => {\n  // if(this.state.)\n  //   if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchMovie} />;\n\n  //   if (inputEntered) {\n  //     console.log(genMovies);\n  //     movies = (\n  //       <div>\n  //         {genMovies.map((movie, index) => {\n  //           if (movie.poster_path) myPath = movie.poster_path;\n  //           else if (movie.backdrop_path) myPath = movie.backdrop_path;\n  //           else return <p key={index}> NO IMAGE! sorry :(</p>;\n  //           return (\n  //             // <div style={{ display: \"flex\" }}>\n  //             <Movie\n  //               key={movie.id}\n  //               title={movie.title}\n  //               image={imgUrl + myPath}\n  //               description={movie.overview}\n  //               name={movie.title}\n  //               rating={movie.vote_average}\n  //             />\n  // {console.log(movie.title)}\n  // </div>\n  //       );\n  //     })}\n  //   </div>\n  // );\n  //     console.log(movies);\n  //   } else {\n  //     inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  //   }\n\n  return (\n    <div>\n      {searchBar}\n      {inputEnablerMsg}\n      {movies}\n    </div>\n  );\n};\n\nexport default GeneralMovies;\n"]},"metadata":{},"sourceType":"module"}