{"ast":null,"code":"var _jsxFileName = \"/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js\";\nimport React, { useEffect, useState } from \"react\"; // import Auxil from \"../../../hoc/Auxil/Auxil\";\n\nimport Movie from \"../../../components/Movie/Movie\"; // import SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = props => {\n  console.log(props.base);\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  console.log(props.base); // useEffect((props) => {\n  //   // console.log(searchInput);\n  //   let searchInput = \"hero\";\n  //   // let movieUrl = \"\";\n  //   // let myMovies = [];\n  //   let id_info = [];\n  //   let movieUrl = \"\";\n  //   let myMovies = [];\n  //   // let finalMovies = [];\n  //   let urlString = \"\";\n  //   // let searchInput = props.searchBar.props.onChange();\n  //   console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n  //   if (searchInput !== \"\")\n  //     urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n  //   console.log(urlString);\n  //   fetch(urlString) // need to give urlString\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       // console.log(json);\n  //       for (const result of json) {\n  //         // console.log(\"index\" + i + \"value\" + result.id);\n  //         // id_info[i] = result.id;\n  //         console.log(result);\n  //         const myId = result.result;\n  //         setStateIds((prevIds) => [...prevIds, ...myId]);\n  //       }\n  //       // id_info = json.results.map((result) => {\n  //       //   return result.id; // returning id's of movies\n  //       // });\n  //     });\n  //   console.log(id_info);\n  //   // .catch((error) => console.log(error));\n  //   console.log(id_info);\n  //   console.log(stateIds);\n  //   // console.log(inputReady);\n  //   console.log(stateIds);\n  //   console.log(props.baseMovieUrl + \"fake id\" + props.API_KEY_MOVIE);\n  //   for (const [i, id] of stateIds.entries()) {\n  //     movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n  //     console.log(\"i? \" + i + \" val? \" + id);\n  //     myMovies[i] = fetch(movieUrl)\n  //       .then((res) => res.json())\n  //       .then((json) => {\n  //         // console.log(json);\n  //         console.log(\"index \" + i + \"val \" + json);\n  //         return json;\n  //       });\n  //     console.log(myMovies);\n  //     setStateMovies(myMovies);\n  //     console.log(stateMovies);\n  //   }\n  //   console.log(stateMovies);\n  //   setInputEntered(true);\n  // }, []);\n  // const [inputReady, setInputReady] = useState(false);\n  // useEffect(() => starterFunc);\n  // let [stateMovies, setStateMovies] = use(State([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n\n  const searchContent = event => {\n    let searchInput = event.target.value; // const [stateSearchInput, setStateSearchInput] = useState(searchInput);\n    // fetchedMovies(\"captain\");\n  }; // const fetchedMovies = (searchInput) => {\n  //  {FetchMovies main function copied to useeffect}\n  // console.log(id_info);\n  //   this.setState({\n  //     movies_ids: id_info, // setting an array of id's\n  //   });\n  // stateIds.map(async (id, index) => {\n  //   movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n  //   // console.log(movieUrl);\n  //   myMovies[index] = await fetch(movieUrl)\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       // console.log(json);\n  //       setStateMovies(myMovies);\n  //       return json; // returning movie at an index location\n  //     });\n  // Promise.all(myMovies);\n  // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n  // setStateMovies((myMovies) => {\n  //   return { myMovies };\n  // });\n  // setStateMovies((prevStateMovies) => {\n  //   return { ...prevStateMovies, ...myMovies };\n  // });\n  // console.log(stateMovies);\n  // setState((prevState) => {\n  //   // Object.assign would also work\n  //   return { ...prevState, ...updatedValues };\n  // });\n  // console.log(myMovies[index]);\n  // finalMovies = myMovies;\n  // console.log(finalMovies);\n  // .catch((error) => {\n  //   console.log(error);\n  // })\n  // this.setState({\n  //   movies: myMovies,\n  // });\n  // console.log(this.state.movies);\n  // });\n  // return finalMovies;\n  // console.log(stmovies);\n  // });\n  // this.setState({ inputEntered: true });\n  // };\n\n\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null; // const starterFunc = () => {\n  // if(this.state.)\n  // if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    console.log(stateMovies);\n    movies = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, stateMovies.map((movie, index) => {\n      if (movie.poster_path) myPath = movie.poster_path;else if (movie.backdrop_path) myPath = movie.backdrop_path;else return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 23\n        }\n      }, \" NO IMAGE! sorry :(\");\n      return (\n        /*#__PURE__*/\n        // <div style={{ display: \"flex\" }}>\n        React.createElement(Movie, {\n          key: movie.id,\n          title: movie.title,\n          image: imgUrl + myPath,\n          description: movie.overview,\n          name: movie.title,\n          rating: movie.vote_average,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }\n        }) // {console.log(movie.title)}\n        // </div>\n\n      );\n    }));\n    console.log(movies);\n  } else {\n    inputEnablerMsg = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 23\n      }\n    }, \"Please! enter a search input above! :)\");\n  } // };\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, props.children, /*#__PURE__*/React.createElement(SearchBar, {\n    onChange: searchContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }), movies, inputEnablerMsg);\n};\n\nexport default GenericMovies;","map":{"version":3,"sources":["/Users/markgiliadov/my-imdb/src/containers/Movies/GenericMovies/GenericMovies.js"],"names":["React","useEffect","useState","Movie","GenericMovies","props","console","log","base","stateIds","setStateIds","stateMovies","setStateMovies","inputEntered","setInputEntered","searchContent","event","searchInput","target","value","imgUrl","movies","myPath","inputEnablerMsg","searchBar","map","movie","index","poster_path","backdrop_path","id","title","overview","vote_average","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,KAAP,MAAkB,iCAAlB,C,CACA;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB,EAN+B,CAO/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAMO,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAIC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA/B,CAD+B,CAE/B;AACA;AACD,GAJD,CAvE+B,CA4E/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,MAAM,GAAG,kCAAb;AACA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,SAAS,GAAG,IAAhB,CA7H+B,CA8H/B;AACA;AACA;;AAEA,MAAIX,YAAJ,EAAkB;AAChB;AACA;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYI,WAAZ;AACAU,IAAAA,MAAM,gBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,WAAW,CAACc,GAAZ,CAAgB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,UAAID,KAAK,CAACE,WAAV,EAAuBN,MAAM,GAAGI,KAAK,CAACE,WAAf,CAAvB,KACK,IAAIF,KAAK,CAACG,aAAV,EAAyBP,MAAM,GAAGI,KAAK,CAACG,aAAf,CAAzB,KACA,oBAAO;AAAG,QAAA,GAAG,EAAEF,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACL;AAAA;AACE;AACA,4BAAC,KAAD;AACE,UAAA,GAAG,EAAED,KAAK,CAACI,EADb;AAEE,UAAA,KAAK,EAAEJ,KAAK,CAACK,KAFf;AAGE,UAAA,KAAK,EAAEX,MAAM,GAAGE,MAHlB;AAIE,UAAA,WAAW,EAAEI,KAAK,CAACM,QAJrB;AAKE,UAAA,IAAI,EAAEN,KAAK,CAACK,KALd;AAME,UAAA,MAAM,EAAEL,KAAK,CAACO,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAUE;AACA;;AAXF;AAaD,KAjBA,CADH,CADF;AAsBA3B,IAAAA,OAAO,CAACC,GAAR,CAAYc,MAAZ;AACD,GA3BD,MA2BO;AACLE,IAAAA,eAAe,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAlB;AACD,GA/J8B,CAgK/B;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGlB,KAAK,CAAC6B,QAFT,eAGE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAEnB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAKGM,MALH,EAOGE,eAPH,CADF;AAWD,CA7KD;;AA8KA,eAAenB,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import Auxil from \"../../../hoc/Auxil/Auxil\";\nimport Movie from \"../../../components/Movie/Movie\";\n// import SearchBar from \"../../../components/Searchbar/Searchbar\";\n\nconst GenericMovies = (props) => {\n  console.log(props.base);\n\n  const [stateIds, setStateIds] = useState([]);\n  const [stateMovies, setStateMovies] = useState([]);\n  const [inputEntered, setInputEntered] = useState(true);\n  console.log(props.base);\n  // useEffect((props) => {\n  //   // console.log(searchInput);\n  //   let searchInput = \"hero\";\n  //   // let movieUrl = \"\";\n  //   // let myMovies = [];\n  //   let id_info = [];\n  //   let movieUrl = \"\";\n  //   let myMovies = [];\n  //   // let finalMovies = [];\n  //   let urlString = \"\";\n  //   // let searchInput = props.searchBar.props.onChange();\n  //   console.log(props.baseSearchUrl + \"api\" + props.API_KEY_SEARCH);\n  //   if (searchInput !== \"\")\n  //     urlString = props.baseSearchUrl.concat(searchInput, props.API_KEY_SEARCH);\n\n  //   console.log(urlString);\n  //   fetch(urlString) // need to give urlString\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       // console.log(json);\n  //       for (const result of json) {\n  //         // console.log(\"index\" + i + \"value\" + result.id);\n  //         // id_info[i] = result.id;\n  //         console.log(result);\n  //         const myId = result.result;\n  //         setStateIds((prevIds) => [...prevIds, ...myId]);\n  //       }\n  //       // id_info = json.results.map((result) => {\n  //       //   return result.id; // returning id's of movies\n  //       // });\n  //     });\n  //   console.log(id_info);\n  //   // .catch((error) => console.log(error));\n  //   console.log(id_info);\n  //   console.log(stateIds);\n\n  //   // console.log(inputReady);\n\n  //   console.log(stateIds);\n  //   console.log(props.baseMovieUrl + \"fake id\" + props.API_KEY_MOVIE);\n  //   for (const [i, id] of stateIds.entries()) {\n  //     movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE;\n  //     console.log(\"i? \" + i + \" val? \" + id);\n  //     myMovies[i] = fetch(movieUrl)\n  //       .then((res) => res.json())\n  //       .then((json) => {\n  //         // console.log(json);\n  //         console.log(\"index \" + i + \"val \" + json);\n  //         return json;\n  //       });\n  //     console.log(myMovies);\n  //     setStateMovies(myMovies);\n  //     console.log(stateMovies);\n  //   }\n  //   console.log(stateMovies);\n  //   setInputEntered(true);\n  // }, []);\n\n  // const [inputReady, setInputReady] = useState(false);\n  // useEffect(() => starterFunc);\n  // let [stateMovies, setStateMovies] = use(State([]);\n  // const [stateIds, setStateIds] = useState([]);\n  // const [inputEntered, setInputEntered] = useState(false);\n\n  const searchContent = (event) => {\n    let searchInput = event.target.value;\n    // const [stateSearchInput, setStateSearchInput] = useState(searchInput);\n    // fetchedMovies(\"captain\");\n  };\n  // const fetchedMovies = (searchInput) => {\n  //  {FetchMovies main function copied to useeffect}\n  // console.log(id_info);\n  //   this.setState({\n  //     movies_ids: id_info, // setting an array of id's\n  //   });\n  // stateIds.map(async (id, index) => {\n  //   movieUrl = props.baseMovieUrl + id + props.API_KEY_MOVIE; // creating a movie from the id given\n  //   // console.log(movieUrl);\n  //   myMovies[index] = await fetch(movieUrl)\n  //     .then((res) => res.json())\n  //     .then((json) => {\n  //       // console.log(json);\n  //       setStateMovies(myMovies);\n  //       return json; // returning movie at an index location\n  //     });\n  // Promise.all(myMovies);\n  // setStateMovies((stateMovies) => [...stateMovies, ...myMovies]);\n  // setStateMovies((myMovies) => {\n  //   return { myMovies };\n  // });\n  // setStateMovies((prevStateMovies) => {\n  //   return { ...prevStateMovies, ...myMovies };\n  // });\n  // console.log(stateMovies);\n  // setState((prevState) => {\n  //   // Object.assign would also work\n  //   return { ...prevState, ...updatedValues };\n  // });\n  // console.log(myMovies[index]);\n  // finalMovies = myMovies;\n  // console.log(finalMovies);\n  // .catch((error) => {\n  //   console.log(error);\n  // })\n  // this.setState({\n  //   movies: myMovies,\n  // });\n  // console.log(this.state.movies);\n  // });\n  // return finalMovies;\n  // console.log(stmovies);\n  // });\n  // this.setState({ inputEntered: true });\n  // };\n  let imgUrl = \"https://image.tmdb.org/t/p/w185/\";\n  let movies = null;\n  let myPath = \"\";\n  let inputEnablerMsg = null;\n  let searchBar = null;\n  // const starterFunc = () => {\n  // if(this.state.)\n  // if (props.baseSearchUrl) searchBar = <SearchBar onChange={searchContent} />;\n\n  if (inputEntered) {\n    // console.log(stateMovies);\n    // const presentMovies = stateMovies;\n    console.log(stateMovies);\n    movies = (\n      <div>\n        {stateMovies.map((movie, index) => {\n          if (movie.poster_path) myPath = movie.poster_path;\n          else if (movie.backdrop_path) myPath = movie.backdrop_path;\n          else return <p key={index}> NO IMAGE! sorry :(</p>;\n          return (\n            // <div style={{ display: \"flex\" }}>\n            <Movie\n              key={movie.id}\n              title={movie.title}\n              image={imgUrl + myPath}\n              description={movie.overview}\n              name={movie.title}\n              rating={movie.vote_average}\n            />\n            // {console.log(movie.title)}\n            // </div>\n          );\n        })}\n      </div>\n    );\n    console.log(movies);\n  } else {\n    inputEnablerMsg = <p>Please! enter a search input above! :)</p>;\n  }\n  // };\n\n  return (\n    <div>\n      {/* {props.searchBar} */}\n      {props.children}\n      <SearchBar onChange={searchContent} />\n      {/* {searchBar} */}\n      {movies}\n\n      {inputEnablerMsg}\n    </div>\n  );\n};\nexport default GenericMovies;\n"]},"metadata":{},"sourceType":"module"}